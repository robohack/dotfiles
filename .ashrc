#
#	.ashrc - per-shell startup stuff for ash via $ENV
#
#ident	"@(#)HOME:.ashrc	37.6	24/09/26 13:38:53 (woods)"

# Assumptions:
#	- chdir must be synonymous with cd, and cd can be reset to a function

# Files referenced:
#
#	$(dirname ${ENVFILE})/.shrc - sourced for common funcs, if needed & avail.
#	$(dirname ${ENVFILE})/.localprofile - may be sourced if using above .shrc
#	~${LOGNAME}/.shrc       - sourced for common functs, if still needed
#	~${LOGNAME}/.localprofile - sourced for $MAILDOMAIN, if needed & avail.
#	$HOME/.shaliases	- sourced, if it is readable
#	$HOME/.ashedit		- sourced, if it is readable else emacs editing set
#	$HOME/.ashlocal		- sourced, if it is readable, at the end
#	$HOME/.ashpwd		- sourced, if it is readable
#	$HOME/.kshsccs		- sourced, if "function" works and it is readable
#	$HOME/.ashsccs		- sourced, if it is readable (and .kshsccs not read)
#	$HOME/.kshlocal		- per $HOME local-only hacks

case $- in *i*)
# everything in this file is for interactive use only, but $ENV is set
# to just the plain filename of this file because ash(1) doesn't have
# arrays and so can't use the ksh(1) ${ENVFILE[]} trick.

export PATH

# If I remember correctly SHLVL was not in early Ksh.... (and it's not in pdksh
# nor its derivatives)
#
# Also, LEV counts (effectively) from zero, and is not set at level zero so as
# to avoid presenting redundant useless information using a simple
# ${LEV:+${LEV}} style of expansion.
#
case ${0} in
-*)
	: this is a login shell
	unset LEV
	;;
*)
	if [ ${SHLVL:-0} -eq 1 -o ${PPID:-0} -eq 1 -o ${PPID:-1} -eq ${LAYERSPID:-0} ] ; then
		: this is still considered a "login" shell
		unset LEV
	else
		if [ -n "${LEV}" ] ; then
		       LEV=$((LEV+1))
		else
			# iff SHLVL is available, try starting with it...
			if [ -n "${SHLVL}" ]; then
				LEV=$((SHLVL-1))
			else
				LEV=1
			fi
		fi
		export LEV
	fi
	;;
esac

# Handle the case of sourcing this file e.g. by a "su" shell user, or some other
# interactive sub-shell, etc.
#
# It is assumed that ~/.profile, which would otherwise source ~/.shrc, is
# sourced only by login shells, and by ~/.xinitrc or by a (possibly remote)
# window manager (e.g. using onx11server), but won't be sourced by default by a
# non-interactive shell or a "su" shell.  It is also assumed of course that
# "zhead" is defined as a function in the desired ~/.shrc file.
#
if ! type zhead >/dev/null 2>&1; then
	# try to find a related .shrc, even when using "su" or a sub-shell
	# the guts here could/should be a function, but it would be in .shrc!
	if [ -n "${ENVFILE}" ]; then
		. $(dirname ${ENVFILE})/.shrc
		# also try to set MAILDOMAIN for .emacs.el if it was not set...
		if [ -z "${MAILDOMAIN}" -a -r $(dirname ${ENVFILE})/.localprofile ]; then
			. $(dirname ${ENVFILE})/.localprofile
		fi
	elif [ -r ${HOME}/.shrc ]; then
		. ${HOME}/.shrc
		if [ -z "${MAILDOMAIN}" -a -r ${HOME}/.localprofile ]; then
			. ${HOME}/.localprofile
		fi
	fi
	if [ -n "${LOGNAME}" ]; then
		eval shrc=~${LOGNAME}/.shrc
		if [ -r ${shrc} ]; then
			. ${shrc}
		fi
		eval lprof=~${LOGNAME}/.localprofile
		if [ -z "${MAILDOMAIN}" -a -r ${lprof} ]; then
			. ${lprof}
		fi
		unset shrc lprof
	fi
	if type rm_alias_funcs >/dev/null 2>&1; then
		rm_alias_funcs
	fi
fi

# note this will be appended to.... (and variables must be used with single quotes)
if [ -n "${ToD}" ]; then
	PS1='${ToD%:*}'
else
	PS1='${UUNAME}'
fi

if ismpx -s || [ "$TERM" = "dmd-myx" ] ; then
	unset -f cd
	# NOTE:  may be re-defined in ~/.ashpwd
	cd ()
	{
		chdir ${1+"$@"}
		# dumber than setban
		BANNER_PWD=${PWD}
		# faster than setban
		eval myxban -l "\"$MYXBAN_L\""
	}
fi
# else
case "$TERM" in
xterm*)
	PS1="${PS1}"'${LEV:+[${LEV}]}'

	unset -f cd
	# NOTE:  may be re-defined in ~/.ashpwd
	cd ()
	{
		chdir ${1+"$@"}
		BANNER_PWD=${PWD}
		setban
	}
	;;
*)
	# XXX these probably are not right to use ${BANNER_PWD} any more?
	#
	if [ "$user" != "$LOGNAME" ] ; then
		PS1="${PS1}"'$TTYN:$user($LOGNAME)@$UUNAME)${LEV:+[${LEV}]} ${BANNER_PWD#$HOME}'
	else
		PS1="${PS1}"'$TTYN:$LOGNAME@$UUNAME[${LEV:+[${LEV}]} ${BANNER_PWD#$HOME}'
	fi
	;;
esac
PS1="${PS1} ${PSc} "

if type alias >/dev/null 2>&1 && [ -r $HOME/.shaliases ] ; then
	. $HOME/.shaliases
fi
# xxx currently .kshsccs uses "function foo {}" syntax, and I've not discovered
# a way to use aliases or other funtions to translate that into "foo() {}"
# syntax....  Otherwise it would be compatible with BSD sh, Ash, dash, et al.
#
if type function >/dev/null 2>&1 && [ -r $HOME/.kshsccs ] ; then
	. $HOME/.kshsccs
elif [ -r $HOME/.ashsccs ]; then
	. $HOME/.ashsccs	# xxx not yet translated...  (maybe automatic?)
fi
if type setban >/dev/null 2>&1 && [ -r $HOME/.ashpwd ] ; then
	. $HOME/.ashpwd
fi

lastcmd ()
{
	tr '[\001-\007]' '[\012*]' < .sh_history | \
		tr '[\176-\377]' '[ *]' | \
		egrep -v '[	 }#]|^$' | \
		tail ${1+"$@"}
}

set -o monitor

# create an empty ~/.ashedit if your shell dies when you enable emacs
#
if [ -r $HOME/.ashedit ] ; then
	. $HOME/.ashedit
else
	case "$(set -o)" in
	*emacs*)
		set -o gmacs 2>/dev/null || set -o emacs
		;;
	esac
fi

if [ -r $HOME/.ashlocal ] ; then
	. $HOME/.ashlocal
fi

# End of interactive-ony code
esac
