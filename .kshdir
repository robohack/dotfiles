#! /bin/ksh
#
#	.kshdir - ksh Push/Pop directory package
#
#ident	"@(#)HOME:.kshdir	21.1	99/11/18 13:12:56 (woods)"

# Internal Variables:
#	_dir_stack	- array of strings (inverted stack)
#	_dir_stack_top	- stack pointer
#
# Internal Functions:
#	_dir_to_tilde
#
# External Functions:
#	pushd, popd, showd, dirs

unset _dir_stack_top _dir_stack
unset -f pushd popd showd dirs

typeset -i10 _dir_stack_top

_dir_stack[0]=""
_dir_stack_top=0

#
#
function _dir_to_tilde
{
	if [ $# -ne 1 ]; then
		echo "kshdir: internal error" >&2
		echo "Usage: $0 directory" >&2
		return 2
	fi
	case $1 in
	$HOME)
		echo "~"
		;;
	/*)
		echo "$1"
		;;
	*)
		echo "~/$1"
		;;
	esac
}

#
#
function popd
{
	typeset -i10 pop_size pop_pointer

	if [ $# -gt 1 ]; then
		echo "Usage: $0 [number]" >&2
		unset pop_size pop_pointer
		return 2
	fi
	if [ $# -eq 1 ]; then
		if [ "${1##[0-9]*}" = "" -o "${1##-[0-9]*}" = "" ]; then
			pop_size=$1
		else
			echo "Usage: $0 [number]" >&2
			unset pop_size pop_pointer
			return 2
		fi
	else
		pop_size=-1
	fi
	if [ $pop_size -lt 0 ]; then
		((pop_pointer=-pop_size))
	else
		((pop_pointer=_dir_stack_top-pop_size))
	fi
	if [ $_dir_stack_top -lt "$pop_pointer" ]; then
		echo "$0: The directory stack does not have $pop_size elements." >&2
	else
		((_dir_stack_top=pop_pointer))
	fi
	cd ${_dir_stack[$_dir_stack_top]}

	unset pop_size pop_pointer
}

#
#
function pushd
{
	if [ $# -ne 1 ]; then
		echo "Usage: $0 directory" >&2
		return 2
	fi
	_dir_stack[_dir_stack_top]="$(/bin/pwd)"
	((_dir_stack_top=_dir_stack_top+1))
	cd $1
}

#
#
function showd
{
	typeset -i10 neg_count count pos_count

	neg_count=0
	count=1
	pos_count=$_dir_stack_top+1

	echo "$pos_count $neg_count	$(_dir_to_tilde $(/bin/pwd))"
	while [ $count -lt $_dir_stack_top+1 ]; do
		((pos_count=pos_count-1))
		((neg_count=neg_count-1))
		echo "$pos_count $neg_count	${_dir_stack[_dir_stack_top-count]}"
		((count=count+1))
	done

	unset neg_count count pos_count
}

# to be compatible with csh (esp. for emacs-19 shell mode)
#
function dirs
{
	typeset -i10 count

	count=1

	echo "$(_dir_to_tilde $(/bin/pwd))\c"
	while [ $count -lt $_dir_stack_top+1 ]; do
		echo " $(_dir_to_tilde ${_dir_stack[_dir_stack_top-count]})\c"
		((count=count+1))
	done
	echo ""

	unset count
}

# unused (i.e. it's broke)
#
## function sd
## {
## 	if [ $# -ne 1 ]; then
## 		showd
## 		return 0
## 	fi
## 	if [ "${1##[0-9]*}" = "" -o "${1##-[0-9]*}" = "" ]; then
## 		switch_index=$1
## 	else
## 		echo "$0: argument must be numeric." >&2
## 		showd
## 		return 1
## 	fi
## 	if [ $switch_index -eq 0 ]; then
## 		cd
## 		unset switch_index
## 		return 0
## 	fi
## 	if [ $switch_index -lt 1 ]; then
## 		((switch_index=-switch_index))
## 	else
## 		((switch_index=_dir_stack_top - switch_index + 1))
## 	fi
## 	if [ $_dir_stack_top -lt $switch_index -o $switch_index -lt 1 ]; then
## 		echo "$0: The directory stack does not have $switch_index elements." >&2
## 	fi
## 	cd ${_dir_stack[_dir_stack_top-switch_index]}
## 	unset switch_index
## }

# unused (i.e. it's broke)
#
## function sd_init
## {
## 	_dir_stack[0]=""
## 	_dir_stack_top=0
## 	sd_init_list="$HOME/*"
## 
## 	for dir_path in $std_init_list ; do
## 		_dir_stack[_dir_stack_top]="$dir_path"
## 		((_dir_stack_top=_dir_stack_top+1))
## 	done
## 	unset sd_init_list dir_path
## }
## 
## typeset -fx popd pushd showd sd sd_init

typeset -fx popd pushd showd
