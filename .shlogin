#
#	.shlogin - login shell startup for plain Bourne Shell, sourced by ~/.profile
#
# N.B.:  this is very similar to ~/.ashlogin!
#
#ident	"@(#)HOME:.shlogin	37.7	25/09/14 11:11:57 (woods)"

# Note I allow for /etc/profile to be explicitly sourced by non-interactive,
# non-login shells, e.g. in ~/.xinitrc and from remote invocations of
# onx11server (defined in ~/.shrc), so here we're testing to see if a shell is
# truly a login shell or an interactive shell so we can determine what
# additional setup we want for such shells, such as setting $ENV and exporting
# it.

# ~/.shrc, sourced early by ~/.profile, which later also sources this file, did
# the tests for interactive/login shells
#
if ${sh_is_login}; then
	#
	# Commands for login shells
	#
	echo "$0: setup for Bourne Shell"
fi

if ${sh_is_interactive} || ${sh_is_login}; then
	#
	# Commands for interactive shells.
	#
	# for emacs timeclock.el
	#
	if [ ! -f ${HOME}/.timelog ] ; then
		touch ${HOME}/.timelog
	fi

	if [ "${LOGNAME}" = root ] ; then
		PS1="[${TTYN}]<${LOGNAME}@${UUNAME}> # "
	else
		PS1="[${TTYN}]<${LOGNAME}@${UUNAME}> $ "
	fi

	ENVFILE=${HOME}/.shrc; export ENVFILE
fi

# this may not do anything for sub-shells but let you type '. $ENV'
#
# (POSIX(2008) says ENV is only to be read by interactive shells, while more
# modern NetBSD and some other systems will read it for all shells (unless in
# "posix" mode), but most older shells ignore $ENV entirely)
#
if [ -n "${ENVFILE}" -a -r "${ENVFILE}" ] ; then
	ENV=${ENVFILE}; export ENV
fi

if [ -z "$LOGNAME" ] ; then
	# some systems won't allow this...
	LOGNAME=${USER} ; export LOGNAME
fi
