#
#	.kshsccs - ksh SCCS helpers
#
# Written by Greg A. Woods <woods@robohack.UUCP> <woods@planix.com>
#
#ident	"@(#)HOME:.kshsccsrm	25.2	02/11/26 17:31:06 (woods)"

# These aliases and functions provide some release and configuration
# management functions over and above sccs(1).  They are useful for small
# single-directory projects, but do not yet incorporate any recursive
# directory traversal functionality.
#
# WARNING:  There are some non-obvious caveats, assumptions, and limitations!
#
# For example, branches are not really supported, other than by careful
# use of '-t' to the right commands, though not all functions accept this
# option.
#
# Many of things should probably be separate scripts.....
#
# Automatic patch file generation (and ChangeLog file generation) will be
# wrong if you delete or rename any files.
#
# The patchlevel.h format is frozen by virtue that it's always generated
# on the fly, and old copies are not also stored using SCCS.
#
# Similarly the ChangeLog files are somewhat less dynamic than they could be
# in order to make release generation bearable.
#
# No status data is stored in the working directory (eg. .vcsinfo), and as
# such the name of the release manifest file must always be specified, and
# the user must always set $PROJECT and $PROJECTDIR.

#
#	vrmchangelog - print a CHANGELOG for changes since last release
#
function vrmchangelog
{
	PRSLIST=":Z::Y:\::M:\t:Dt:\t:DI: :DL:\n:C:"
	RELSID=""
	CUR=0
	VERBOSE=0
	while getopts cmr:v OPTCH
	do
	  	case $OPTCH in
		r)
			RELSID="-r${OPTARG}"
			;;
		c)
			CUR=1
			;;
		m)
			PRSLIST="$PRSLIST MRs:\n:M:"
			;;
		v)
			VERBOSE=1
			;;
		*)
			echo "Usage: $0 [-rSID [-c]] [-v] [-m] release-manifest [module ...]" >&2
			return 2
			;;
		esac
	done
	shift $(( $OPTIND - 1 ))
	if [ $CUR -eq 1 -a -z "$RELSID" ] ; then
		echo "Usage: $0 [-rSID [-c]] [-v] [-m] release-manifest [module ...]" >&2
		return 2
	fi
	if [ $# -lt 1 ] ; then
		echo "Usage: $0 [-rSID [-c]] [-v] [-m] release-manifest [module ...]" >&2
		return 2
	fi
	RELMAN=${1}
	shift
	MODLIST=""
	FILEGREP=""
	DOGREP="-n -e p"
	while [ $# -gt 0 ] ; do
		FILEGREP="$FILEGREP -e /${1}/p"
		MODLIST="$MODLIST ${1}"
		shift
	done
	if [ -n "$FILEGREP" ] ; then
		DOGREP="-n"
	fi
	if sccs -p $PROJECT val $RELMAN ; then
		: # it's OK Jim....
	else
		echo "$0: $RELMAN is not a valid SCCS file." >&2
		return 1
	fi
	# assume there's nothing newer out there than what's in $RELMAN
	if [ $CUR -eq 1 ] ; then
		LASTRELSID=$RELSID
		RELSID="-r$(sccs -p $PROJECT prs -l -d:I: $RELMAN)"
		sccs -p $PROJECT get -s -p $RELSID $RELMAN |
			sed -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' | sort > /tmp/vwn.$$
		sccs -p $PROJECT get -s -p $LASTRELSID $RELMAN |
			sed -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' | sort > /tmp/vwo.$$
	else
		LASTRELSID="-r$(sccs -p $PROJECT prs -e $RELSID -d:I: $RELMAN | sed -n -e 2p)"
		if [ -z "$RELSID" ] ; then
			RELSID="-r$(sccs -p $PROJECT prs -l -d:I: $RELMAN)"
		fi
		sccs -p $PROJECT get -s -p $RELSID $RELMAN |
			sed -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' | sort > /tmp/vwn.$$
		sccs -p $PROJECT get -s -p $LASTRELSID $RELMAN |
			sed -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' | sort > /tmp/vwo.$$
	fi
	LSID="$(expr X$LASTRELSID : 'X-r\(.*\)$')"
	CSID="$(expr X$RELSID : 'X-r\(.*\)$')"
	if [ $VERBOSE -eq 1 ] ; then
		echo ""
		echo "Changes between release $LSID and ${CSID}:"
		if [ -n "$MODLIST" ] ; then
			echo "NOTE: log information restricted to: $MODLIST"
		fi
		echo ""
	fi
	# the awk is just sillyness to get $RELMAN out last....
	join -a2 -e "1.1" -j 3 -o 2.3 1.4 2.4 /tmp/vwo.$$ /tmp/vwn.$$ |
		awk '{
			if ($1 == "'"$RELMAN"'")
				rline = $0
			else
				print $0
		}
		END {
			print rline
		} ' > /tmp/vwj.$$
	sed $DOGREP $FILEGREP < /tmp/vwj.$$ |
		while read name oldsid newsid junk; do
			sedsid="$(echo $oldsid | sed 's/\\./\\\./g')"
			sccs -p $PROJECT prs -e -r$newsid -d"$PRSLIST" $name |
				sed -n -e "/	[DR] $sedsid /q" -e p
		done
	rm -f /tmp/vw?.$$
	unset OPTCH COMPLETE PRSLIST RELSID LASTRELSID RELMAN LSID CSID CUR FILEGREP DOGREP MODLIST VERBOSE name oldsid newsid sedsid junk
}

#
#	vrmdorelease - cut a new release using a release manifest file
#
function vrmdorelease
{
	LOG="ChangeLog"
	DOPATCH=0
	while getopts c:pr:s: OPTCH
	do
		case $OPTCH in
		c)
			LOG="${OPTARG}"
			;;
		p)
			DOPATCH=1
			;;
		r)
			RELSID="-r${OPTARG}"	# for "get -e" of $RELMAN
			;;
		s)
			STATE="${OPTARG}"	# value for the 'q' flag
			;;
		*)
			echo "Usage: $0 [-c] [-p] [-rSID] [-s STATE] release-manifest [module ...]" >&2
			return 2
			;;
		esac
	done
	shift $(( $OPTIND - 1)
	if [ $# -lt 1 ] ; then
		echo "Usage: $0 [-c] [-p] [-rSID] [-s STATE] release-manifest [module ...]" >&2
		return 2
	fi
	RELMAN=${1}
	shift
	if sccs -p $PROJECT val $RELMAN ; then
		: # it's OK Jim....
	else
		echo "$0: $RELMAN is not a valid SCCS file (try vmkrelman)." >&2
		return 1
	fi
	if [ -n "$(sccs -p $PROJECT tell)" ] ; then
		echo "$0: files are being edited!" >&2
	fi
	if [ -n "$STATE" ] ; then
		sccs -p $PROJECT admin -fq"${STATE}" $RELMAN
	fi
	sccs -p $PROJECT edit $RELSID $RELMAN
	( vmkrelman $RELMAN $* > $RELMAN )
	sccs -p $PROJECT diffs $RELMAN
	echo "Is this OK? [y] \c"
	read ans
	case "$ans" in
	[nN]*)
		sccs -p $PROJECT unedit $RELMAN
		return 1
		;;
	esac
	sccs -p $PROJECT delget $RELMAN
	if [ -r patchlevel.h ] ; then
		echo "$0: generating new patchlevel.h ..."
		mv patchlevel.h patchlevel.old || return 1
		( vrmpatchlevel $RELMAN > patchlevel.h )
		chmod -w patchlevel.h
	else
		echo "$0: NOTICE: no 'patchlevel.h' file here...." >&2
	fi
	echo "$0: updating ${LOG} ..."
	( vrmchangelog -v $RELMAN > ${LOG}.new )
	if [ -r ${LOG} ] ; then
		mv ${LOG} ${LOG}.old || return 1
		cat ${LOG}.new ${LOG}.old > ${LOG}
	else
		mv ${LOG}.new ${LOG}
	fi
	chmod -w ${LOG}
	if [ $DOPATCH -eq 1 ] ; then
		NEWREL="$(sccs -p $PROJECT prs -l -d:I: $RELMAN)"
		echo "$0: generating Patch-$NEWREL ..."
		( vrmmkpatch -v $RELMAN > Patch-$NEWREL )
	fi
	unset OPTCH RELSID RELMAN NEWREL LOG DOPATCH
}

#
#	vrmgetrelease - get all the files as specified in a release manifest
#
function vrmgetrelease
{
	RELSID=""
	PRINTIT=""
	while getopts Ppr: OPTCH
	do
	  	case $OPTCH in
		r)
			RELSID="-r${OPTARG}"
			;;
		p)
			PRINTIT="-p"
			;;
		*)
			echo "Usage: $0 [-p] [-rSID] release-manifest [module ...]" >&2
			return 2
			;;
		esac
	done
	shift $(( $OPTIND - 1 ))
	if [ $# -lt 1 ] ; then
		echo "Usage: $0 [-p] [-rSID] release-manifest [module ...]" >&2
		return 2
	fi
	RELMAN=${1}
	shift
	FILEGREP=""
	DOGREP=""
	while [ $# -gt 0 ] ; do
		FILEGREP="$FILEGREP -e /${1}/p"
		shift
	done
	if [ -n "$FILEGREP" ] ; then
		DOGREP="-n"
	fi
	if sccs -p $PROJECT val $RELMAN ; then
		: # it's OK Jim....
	else
		echo "$0: $RELMAN is not a valid SCCS file." >&2
		return 1
	fi
	# hope it doesn't wipe out something important!
	sccs -p $PROJECT get -s -p $RELSID $RELMAN |
		sed $DOGREP -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' $FILEGREP |
		while read zed tname name sid junk; do
			sccs -p $PROJECT get $PRINTIT -r$sid $name
		done
	( vrmpatchlevel $RELSID $RELMAN > patchlevel.h )
	chmod -w patchlevel.h
	if [ -n "${PROJECTDIR}" ] ; then
		eval TRYHOME="$(filexp ~${PROJECTDIR})"
		if [ -d ${TRYHOME}/src/${PROJECT}/SCCS ] ; then
			sdir="${TRYHOME}/src/${PROJECT}/SCCS"
		elif [ -d ${TRYHOME}/source/${PROJECT}/SCCS ] ; then
			sdir="${TRYHOME}/source/${PROJECT}/SCCS"
		elif [ -d ${TRYHOME}/src/${PROJECT} ] ; then
			sdir="${TRYHOME}/src/${PROJECT}"
		elif [ -d ${TRYHOME}/source/${PROJECT} ] ; then
			sdir="${TRYHOME}/source/${PROJECT}"
		else
			sdir="${PROJECTDIR}/${PROJECT}"
		fi
		unset TRYHOME
	else
		sdir="$PROJECT"
	fi
	if [ -f "$sdir/../ChangeLog" ] ; then
		cp $sdir/../ChangeLog ./ChangeLog
	fi
	unset OPTCH DOGREP FILEGREP PRINTIT RELSID RELMAN zed tname name sid junk sdir
}

#
#	vrmmkpatch - generate patches for changes since last release
#
# i.e. diff the "current" release against the one prior to it.
#
# NOTE: requires a patched sccsdiff that accepts '-c' for context diffs,
# and doesn't do 'get -k' by default....
#
function vrmmkpatch
{
	PRSLIST=":Z::Y:\::M:\t:Dt:\t:DI: :DL:\n:C:"
	RELSID=""
	CUR=0
	VERBOSE=0
	while getopts cmr:v OPTCH
	do
	  	case $OPTCH in
		r)	# for the given release (against the one prior to it)
			RELSID="-r${OPTARG}"
			;;
		c)	# for the "current" release against the specified one
			CUR=1
			;;
		m)
			PRSLIST="$PRSLIST MRs:\n:M:"
			;;
		v)
			VERBOSE=1
			;;
		*)
			echo "Usage: $0 [-rSID [-c]] [-v] [-m] release-manifest [module ...]" >&2
			return 2
			;;
		esac
	done
	shift $(( $OPTIND - 1 ))
	if [ $CUR -eq 1 -a -z "$RELSID" ] ; then
		echo "Usage: $0 [-rSID [-c]] [-v] [-m] release-manifest [module ...]" >&2
		return 2
	fi
	if [ $# -lt 1 ] ; then
		echo "Usage: $0 [-rSID [-c]] [-v] [-m] release-manifest [module ...]" >&2
		return 2
	fi
	RELMAN=${1}
	shift
	MODLIST=""
	FILEGREP=""
	DOGREP="-n -e p"
	while [ $# -gt 0 ] ; do
		FILEGREP="$FILEGREP -e /${1}/p"
		MODLIST="$MODLIST ${1}"
		shift
	done
	if [ -n "$FILEGREP" ] ; then
		DOGREP="-n"
	fi
	if sccs -p $PROJECT val $RELMAN ; then
		: # it's OK Jim....
	else
		echo "$0: $RELMAN is not a valid SCCS file." >&2
		return 1
	fi
	# assume there's nothing newer out there than what's in $RELMAN
	if [ $CUR -eq 1 ] ; then
		LASTRELSID="$RELSID"
		RELSID="-r$(sccs -p $PROJECT prs -l -d:I: $RELMAN)"
		sccs -p $PROJECT get -s -p $RELSID $RELMAN |
			sed -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' | sort > /tmp/vrn.$$
		sccs -p $PROJECT get -s -p $LASTRELSID $RELMAN |
			sed -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' | sort > /tmp/vro.$$
	else
		LASTRELSID="-r$(sccs -p $PROJECT prs -e $RELSID -d:I: $RELMAN | sed -n -e 2p)"
		if [ -z "$RELSID" ] ; then
			RELSID="-r$(sccs -p $PROJECT prs -l -d:I: $RELMAN)"
		fi
		sccs -p $PROJECT get -s -p $RELSID $RELMAN |
			sed -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' | sort > /tmp/vrn.$$
		sccs -p $PROJECT get -s -p $LASTRELSID $RELMAN |
			sed -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' | sort > /tmp/vro.$$
	fi
	LSID="$(expr X$LASTRELSID : 'X-r\(.*\)$')"
	CSID="$(expr X$RELSID : 'X-r\(.*\)$')"
	if [ $VERBOSE -eq 1 ] ; then
		echo ""
		echo "Patch file to update release $LSID to ${CSID}:"
		if [ -n "$MODLIST" ] ; then
			echo "NOTE: updates restricted to: $MODLIST"
		fi
		echo ""
	fi
	# NOTE:  this won't permit changes in the output of vpatchlevel!!!
	( vrmpatchlevel $LASTRELSID $RELMAN > /tmp/vpo.$$ )
	( vrmpatchlevel $RELSID $RELMAN > /tmp/vpn.$$ )
	echo "Index: patchlevel.h"
	echo "Prereq: $LSID"
	diff -c /tmp/vpo.$$ /tmp/vpn.$$
	join -a2 -e "1.1" -j 3 -o 2.3 1.4 2.4 /tmp/vro.$$ /tmp/vrn.$$ |
		sed $DOGREP $FILEGREP |
		while read name oldsid newsid junk; do
			sedsid="$(echo $oldsid | sed 's/\\./\\\./g')"
			echo '#'
			sccs -p $PROJECT prs -e -r$newsid -d"$PRSLIST" $name |
				sed -n -e 's/^/# /' -e "/	[DR] $sedsid /q" -e p
			echo "Index: $name"
			echo "Prereq: $oldsid"
			sccs -p $PROJECT sccsdiff -c -r$oldsid -r$newsid $name
		done
	rm -f /tmp/v[rn]?.$$
	unset OPTCH PRSLIST RELMAN RELSID LASTRELSID CUR LSID CSID FILEGREP DOGREP MODLIST VERBOSE name oldsid newsid sedsid junk
}

#
#	vmkrelman - create a "release manifest" file
#
# WARNING:  This implies the "top" SID's are all ready for release....
#
function vmkrelman
{
	PRSLIST=":Z:\t:Y:\t:M:\t:I:\t(:Q:)\t:D:\t:T:"
	if [ $# -lt 1 ] ; then
		echo "Usage: $0 release-manifest [module ...]" >&2
		return 2
	fi
	RELMAN=${1}
	shift
	FILEGREP=""
	DOGREP="-e /$RELMAN/d"
	while [ $# -gt 0 ] ; do
		if [ "${1}" = "$RELMAN" ] ; then
			echo "$0: don't include $RELMAN in modules list!" >&2
			return 1
		fi
		FILEGREP="$FILEGREP -e /${1}/p"
		shift
	done
	if [ -n "$FILEGREP" ] ; then
		DOGREP="-n"
	fi
	# the extra quoting is to avoid keyword expn. when this file is SCCSed
	echo "# This is a Release Manifest file"
	echo "%"Z"%	%"Y"%	%"M"%	%"I"%	(%"Q"%)	%"E"%	%"U"%"
	echo ""
	# we should really validate all these files too...
	# TODO: how do we recurse here?
	sccs -p $PROJECT prs -l -d"$PRSLIST" $PROJECT |
		sed $DOGREP $FILEGREP | sort +2 -3
	unset PRSLIST RELMAN DOGREP FILEGREP
}

#
#	vrmpatchlevel - create a patchlevel.h file
#
function vrmpatchlevel
{
	RELSID=""
	while getopts r: OPTCH
	do
	  	case $OPTCH in
		r)	# for the given release (against the one prior to it)
			RELSID="-r${OPTARG}"
			;;
		*)
			echo "Usage: $0 [-rSID] release-manifest [module ...]" >&2
			return 2
			;;
		esac
	done
	shift $(( $OPTIND - 1 ))
	if [ $# -ne 1 ] ; then
		echo "Usage: $0 release-manifest" >&2
		return 2
	fi
	RELMAN=${1}
	shift
	if sccs -p $PROJECT val $RELMAN ; then
		: # it's OK Jim....
	else
		echo "$0: $RELMAN is not a valid SCCS file." >&2
		return 1
	fi
	eval $(sccs -p $PROJECT prs $RELSID -d'release=:R: level=:L: branch=:B: sequence=:S: reldate=":D: :T:"' $RELMAN)
	if [ -z "$branch" ] ; then
		branch=0
	fi
	if [ -z "$sequence" ] ; then
		sequence=0
	fi
	echo "/*\n *	patchlevel.h - automatically generated by $0\n *"
	if [ $branch -eq 0 ] ; then
		echo " * #ident \"@(#)patchlevel.h: ${release}.${level}	${reldate}\""
	else
		echo " * #ident \"@(#)patchlevel.h: ${release}.${level}.${branch}.${sequence}	${reldate}\""
	fi
	echo " */"
	echo "#define VER_ID		$release"
	echo "#define VER_SUB		$level"
	echo "#define VER_BR		$branch"
	echo "#define VER_SEQ		$sequence"

	unset RELSID RELMAN release level branch sequence reldate
}

#
#	vrmwhatsnew - print comments about any un-released changes
#
# TODO: doesn't yet find new files not in manifest.... (vlist | diff - Release)
#
function vrmwhatsnew
{
	PRSLIST=":Z::Y:\::M:\t:Dt:\t:DI: :DL:\n:C:"
	RELSID=""
	while getopts r: OPTCH
	do
	  	case $OPTCH in
		r)
			RELSID="-r${OPTARG}"
			;;
		*)
			echo "Usage: $0 [-rSID] release-manifest [module ...]" >&2
			return 2
			;;
		esac
	done
	shift $(( $OPTIND - 1 ))
	if [ $# -lt 1 ] ; then
		echo "Usage: $0 [-rSID] release-manifest [module ...]" >&2
		return 2
	fi
	RELMAN=${1}
	shift
	FILEGREP=""
	DOGREP=""
	while [ $# -gt 0 ] ; do
		FILEGREP="$FILEGREP -e /${1}/p"
		shift
	done
	if [ -n "$FILEGREP" ] ; then
		DOGREP="-n"
	fi
	sccs -p $PROJECT info
	echo ""
	sccs -p $PROJECT get -s -p $RELSID $RELMAN |
		sed $DOGREP -e '/^[ 	]*#/d' -e '/^[ 	]*$/d' $FILEGREP |
		while read zed tname name sid junk; do
			sedsid="$(echo $sid | sed 's/\\./\\\./g')"
			sccs -p $PROJECT prs -e -d"$PRSLIST" $name 2>/dev/null |
				sed -n -e "/	[DR] $sedsid /q" -e p
		done
	unset OPTCH PRSLIST RELSID RELMAN FILEGREP DOGREP zed tname name sedsid sid junk
}

#
#	vwhat - a saner version of what
#
function vwhat
{
	USAGE="Usage: $0 [[-rSID] [-R release-manifest]] | file ..."
	RELSID=""
	RELMAN=""
	while getopts r:R: OPTCH
	do
	  	case $OPTCH in
		r)
			RELSID="-r${OPTARG}"
			;;
		R)
			RELMAN="${OPTARG}"
			;;
		*)
			echo "$USAGE" >&2
			return 2
			;;
		esac
	done
	shift $(( $OPTIND - 1 ))
	if [ -n "$RELMAN" ] ; then
		if [ $# -ne 0 ] ; then
			echo "$USAGE" >&2
			return 2
		fi
		if sccs -p $PROJECT val $RELMAN ; then
			: # it's OK Jim....
		else
			echo "$0: $RELMAN is not a valid SCCS file." >&2
			return 1
		fi
		FILES=$(sccs -p $PROJECT get -p $RELSID $RELMAN |
				sed -e "/$RELMAN/d" -e '/^[ 	]*#/d' -e '/^[ 	]*$/d')
	else
		if [ $# -eq 0 ] ; then
			echo "$USAGE" >&2
			return 2
		fi
		FILES=$*
	fi
	what $FILES | awk 'NF > 1 {print $0}' | sort -u

	unset USAGE RELSID RELMAN FILES
}
