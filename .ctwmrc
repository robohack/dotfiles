# -*-conf-*-
#
# conf mode works best with conf-space-mode, but that font-locks the M4
# statements weirdly.  Defining conf-space-keywords (in the tail comment) helps
# a bit.
#
# m4 mode is also helpful, but it doesn't properly honour matching of
# curly braces, nor strings
#
#	.ctwmrc - local startup for ctwm
#
#ident	"@(#)HOME:.ctwmrc	37.37	24/11/29 12:33:52 (woods)"
#
# N.B.:  To test changes first find the temp file output from the most recent
# run with '-k' and then do:
#
#	cat /var/tmp/ctwmrc.XXXXXX ~/.ctwmrc | m4 | less
#
# Also run ctwm with "-K $HOME/.ctwmrc.m4out" to see the final result.
#
# Note on macos temp files are in $(getconf DARWIN_USER_TEMP_DIR), and this
# value is often also in $TMPDIR.
#
# Things that affect the operation of various menus, etc.:
#
# Note from ctwm(1):
#
#	The only resource used by ctwm is bitmapFilePath for a colon-separated
#	list of directories to search when looking for bitmap files.
#
# Private xbm icon collection goes in ~/lib/bitmaps
# Private xpm icon collection goes in ~/lib/pixmaps
# Sounds to play go in ~/lib/sounds (eg "newmail").
#
# Environment variables used (set by .profile et al):
#
# RSH		- path to local rsh(1), or maybe ssh(1)
# SSH		- path to local ssh(1)
# X11BIN	- localized path for /usr/X11/bin or /usr/bin/X11, etc.
# X11PATH	- localized path for /usr/X11 or /usr/X11R6, etc.
# X11SERVER	- name of a possibly more powerful local server for X applications
# DISPLAY	- of course
# REMOTE_DISPLAY - suitable for local network access, with xauth sent
# PATH		- sometimes included in one passed to remote hosts
# AUDIOPLAYER	- program to invoke to play a sound file (eg. "auplay")
# XTERM_OPTS	- it is usually empty, but is passed to all xterms
# XTERM_LITTLE_OPTS - used to specify the geometry of the right-hand little xterms
# XTERM_BIG_OPTS - used to specify the geometry of main working xterms
# XTERM_LOGIN_OPTS - used for @CLIENTHOST xterms (for macos login session recording)
# MY_EMACS	- the specific "emacs" to invoke
# XchronoOpts	- options for xchrono
#
# Also:
#
# XloadGeom*
#
# Note macros expanded by M4, e.g. HOME, must be used instead of environment
# variables of the same name, unless they are quoted from M4, as they are
# obviously expanded first while environment variables are expanded at run/use
# time!  Thus environment variable names (in script settings) should be encosed
# in curly brackets for visibility, e.g. "${DISPLAY}".
#
# The current directory is always expected to be $HOME.
#
# ". ./.profile" should provide proper PATH setup (i.e. at the remote host)
#
# "set -i; ./.shrc" should provide a function "onx11server"

# Note that we could use changecom() and have these macros appear in "comments"
# in ctwmrc syntax, and they would still be visible to M4, but this is not as
# necessary for CTWM in order to keep line numbers in error messages accurate.

changequote([, ])

# suck in the shared macros, adjusting their comments on the way through....
#
changecom()
esyscmd([sed 's/^!/#/' ]HOME[/.X11-m4macros.m4])
changecom([#])

ifelse(eval(index(HOSTNAME, [weird.com]) >= 0), 1, [define([AT_WEIRD], [@weird.com])])
ifelse(eval(index(HOSTNAME, [robohack.planix.com]) >= 0), 1, [define([AT_WEIRD], [@robohack.planix.com])])

ifelse(eval(index(HOSTNAME, [.local]) >= 0), 1, [define([AT_LOCAL], [@local])])

# this was the old SS20 with a bw2 monitor running NetBSD
ifelse(HOSTNAME, [very.weird.com], [define([AT_VERY_WEIRD], [@very.weird])])

ifelse(HOSTNAME, [very.local], [define([AT_VERY_LOCAL], [@very.local])])
ifelse(HOSTNAME, [very-old.local], [define([AT_VERY_LOCAL], [@very-old.local])])

esyscmd([printf "define([SYSTEM], %s)\n" "$(uname -s)"])

ifelse(SYSTEM, [Darwin], [define([ON_OSX], [yes])])

# IFF ${X11SERVER} is set, then define it as a macro with its env value
esyscmd([test -n "${X11SERVER}" && printf "# defining X11SERVER=${X11SERVER}\n define([X11SERVER], [${X11SERVER}])\n"])

# Boolean flags
#
# keep these sorted as if the 'No' was stripped
#
AutoFocusToTransients	# there are some good things, and some VERY bad things, about this...
#AutoOccupy		# Definitely not a good idea....
AutoRelativeResize
AutoRaiseIcons
ifelse(eval(PLANES <= 8), 1, [BeNiceToColormap])
BorderResizeCursors
#NoCaseSensitive	# only affects iconmanager?
CenterFeedbackWindow
#NoClickToFocus		# OBVIOUSLY! (xxx but with the "No" it is unrecognized by 4.0.3)
ClientBorderWidth
DecorateTransients
DontMoveOff		# unfortunately also forces clients to resize
DontPaintRootWindow
NoGrabServer
NoIconManagerFocus	# also, obviously!
NoMenuShadows
NoRaiseOnMove
NoRaiseOnResize
NoShowOccupyAll
#NoTitleFocus		# XXX hmmm..... damned if you do, damned if you don't!
PackNewWindows
RaiseOnClick		# xxx because "RaiseOnClickButton 1" doesn't seem to work...
RestartPreviousState	# only useful when restarting the WM (saves to X11 server memory)
ReallyMoveInWorkspaceManager
#ReverseCurrentWorkspace
SaveWorkspaceFocus	# new in 3.8.1
ShowWorkSpaceManager
SchrinkIconTitles	# a spello, fixed in 4.?.? (????)
ShortAllWindowsMenus
SortIconManager
StayUpMenus		# xxx give this a try again...
StartInMapState
SunkFocusWindowTitle
#TransientHasOccupation # DNE: make sure transients stay with their leader!
UseThreeDBorders
#UseThreeDIconBorders	# XXX apparently it never did anything anyway
UseThreeDIconManagers
UseThreeDMenus
UseThreeDTitles
ifelse(eval(PLANES > 8), 1, [UseThreeDWMap])	# this is way too wasteful of colours....
WarpRingOnScreen
WarpToDefaultMenuEntry
WindowRing		# all the windows (on the screen) except those in WindowRingExclude

# variables with simple values
#
BorderWidth			BORDERWIDTH	# has no effect when UseThreeDBorders is on
ThreeDBorderWidth		TDBORDERWIDTH	# has no effect unless UseThreeDBorders is on])
BorderShadowDepth		ShadowDepth	# has no effect unless UseThreeDBorders is on])
TitleButtonShadowDepth		ShadowDepth	# has no effect unless UseThreeDBorders is on])
TitleShadowDepth		ShadowDepth	# has no effect unless UseThreeDBorders is on])
WMgrButtonShadowDepth		ShadowDepth	# has no effect unless UseThreeDBorders is on])
IconBorderWidth			ShadowDepth	# has no effect unless UseThreeDBorders is on])
IconManagerShadowDepth		ShadowDepth	# has no effect unless UseThreeDBorders is on])
FramePadding			0		# 0 is the default with UseThreeDTitles set

# n.b.:  resolutions are in pixels per metre, for some stupid reason....
# so 4500 dpM is just over 110 dpi
#
 ifelse(eval(X_RESOLUTION >= 4500 && Y_RESOLUTION >= 4500), 1,
 [
MoveDelta			12
MoveOffResistance		100
MovePackResistance		100
Zoom				16	# just for creation and destruction?
 ],
# else
 [
MoveDelta			4
MoveOffResistance		50
MovePackResistance		50
Zoom				12
 ])

ConstrainedMoveTime		600	# 400 seems a tad too quick for a double-click
IconifyStyle			"normal"
MaxIconTitleWidth		500
MaxWindowSize			"eval(WIDTH * 2)[x]eval(HEIGHT * 2)"	# not everyone plays fair..., default is "30000x30000"
OpaqueMoveThreshold		100	# window % of screen size
OpaqueResizeThreshold		100	# window % of screen size
OpenWindowTimeout		15
# XXX this doesn't seem to work...
RaiseOnClickButton		1

# I'm tired of dragging so many windows around!
 ifelse(eval(FontYDPI > 110), 1,
 [
RandomPlacement			"on" "+100+100"
 ],
# else
 [
RandomPlacement			"on"
 ])

UsePPosition			"non-zero"
XMoveGrid			1
YMoveGrid			1

# N.B.:  "font" in CTWM (since 3.5) really means FontSet, except only really in
# 3.5, borked in 3.6 and newer!
#
# This wasn't really documented anywhere ever, and only mentioned in the CHANGES
# file as follows:
#
#	* Better I18N. From Toshiya Yasukawa <t-yasuka@dd.iij4u.or.jp>. (Define
#	    I18N in Imakefile to activate it).
#
# The I18N code became the only code in 3.8.
#
# XXX unfortunately you can't actually define FontSets for CTWM fonts because
# they always (up to 4.1.0 at least) have ",*" appended to the string!  Which
# also explains why the default font, which was "fixed,*" never worked right!

TitleFont	"-*-DecentFontSerif-bold-r-normal--0-DecentDeciPt-FontXDPI-FontYDPI-p-*-iso10646-1"

IconFont	"-*-DecentFontSans-medium-r-normal--0-TinyDeciPt-FontXDPI-FontYDPI-p-*-iso10646-1"

IconManagerFont "-*-DecentFontSans-medium-r-normal--0-SmallerDeciPt-FontXDPI-FontYDPI-p-*-iso10646-1"

MenuFont	"-*-DecentFontSans-medium-r-normal--0-SmallerDeciPt-FontXDPI-FontYDPI-p-*-iso10646-1"

# n.b.:  the resize "window" is a box sized for monospace numbers, so using a
# proportional font leaves un-balanced black bars on the sides, but a serifed
# font somehow looks better, leaving us with few choices, most in the "courier"
# style....
#
# luxi mono (a serif font) has nice looking numbers, but it isn't everywhere
# (also note it may support both 'c' and 'm' spacing, or maybe just 'c'?!)
#ResizeFont	"-*-luxi mono-bold-o-normal--0-360-FontXDPI-FontYDPI-m-*-iso10646-1"
#
#ResizeFont	"-*-courier-bold-i-normal--0-360-FontXDPI-FontYDPI-m-*-iso10646-1"
#
ResizeFont	"-*-courier 10 pitch-bold-i-normal--0-360-FontXDPI-FontYDPI-m-*-iso10646-1"

WorkSpaceFont	"-*-DecentFontSans-medium-r-normal--0-TinyDeciPt-FontXDPI-FontYDPI-p-*-iso10646-1"

# XXX which is the font for the "identify" and "about" windows?

## XXX DefaultFont is not yet configurable (I hacked a fix for NetBSD's version
## but....)  Note if this fails to create a FontSet then a hard-coded default is
## attempted, and originally it was "fixed,*", so never results in anything
## useful or readable!
##
##DefaultFont	"-*-DecentFontSans-medium-r-normal--0-DecentDeciPt-FontXDPI-FontYDPI-m-*-iso10646-1"

# Define some useful functions for motion-based actions.
# These must come after fonts....
#
ChangeWorkspaceFunction		!"${AUDIOPLAYER} HOME/lib/sounds/wm-wschange &"
IconifyFunction			!"${AUDIOPLAYER} HOME/lib/sounds/wm-iconify &"
DeIconifyFunction		!"${AUDIOPLAYER} HOME/lib/sounds/wm-deiconify &"
DefaultFunction			!"${AUDIOPLAYER} HOME/lib/sounds/wm-default &"
# this is the default...
#WindowFunction			{ f.deiconify f.raise }

Color {
	# highlit window borders
	BorderColor		"SteelBlue"
	# unused?
	BorderTileBackground	"grey70"
	# un-highlit window borders
	BorderTileForeground	"grey50"
	DefaultBackground	"LightSteelBlue"
	DefaultForeground	"blue4"
	IconBackground		"blue4"
	IconForeground		"White"
	IconBorderColor		"gray50"
	IconManagerBackground	"blue4"
	IconManagerForeground	"White"
	IconManagerHighlight	"yellow"
	# XXX hmmm....  the CHANGES file says:
	#
	#  * If there is neither MapWindowBackground, nor MapWindowForeground in the
	#    config file,the window title colors are used for the small windows in the
	#    workspace map.
	#
	# and the manual page concurs:
	#
	#	If there is neither MapWindowBackground, nor MapWindowForeground
	#	the window title colors are used.
	#
	# by which I think it means CTWM's "TitleForeground" color is used....
	#
	MapWindowBackground	"LightSteelBlue" {
		"AirTrafficMonitor" "LightSkyBlue"
		"Console"	"DarkGreen"
		"Links"		"maroon"
		"Xnest"		"teal"
		"emacs"		"yellow"
		# XXX unfortunately the "root*" trick doesn't work very well
		# since these colours are only assigned if the window name, at
		# the moment the window is created, matches; or if Ctwm is
		# restarted, e.g. after one runs "su"...
		"root*"		"red"
		# more for fun
		"tkined"	"goldenrod"
		"xcolors"	"PaleGreen"
		"xmahjongg"	"gold"
		"xterm"		"SteelBlue"
	}
	MapWindowForeground	"Black" {
		# better contrast for these ones....
		"AirTrafficMonitor" "Black"
		"Links"		"White"
		"Xnest"		"White"
		"tkined"	"White"
		"xcolors"	"Black"
		"xterm"		"White"
	}
	MenuBackground		"DarkGreen"
	MenuForeground		"White"
	MenuTitleBackground	"DarkSeaGreen"
	MenuTitleForeground	"White"
	MenuShadowColor		"gray50"
	IconBackground		"blue" {	# default is white
		"AirTrafficMonitor" "LightSkyBlue"
		"Console"	"DarkGreen"
		"Links"		"maroon"
		"Xnest"		"teal"
		"emacs"		"yellow2"
		"root*"		"red"
		"tkined"	"goldenrod"
		"xcolors"	"PaleGreen"
		"xmahjongg"	"gold"
		"xterm"		"SteelBlue"
	}
	IconForeground		"White" {	# default is black
		"AirTrafficMonitor" "Black"
		"emacs"		"Black"
		"tkined"	"Black"
		"xcolors"	"Black"
		"xmahjongg"	"Black"
	}
	# and again for the window titles
	TitleBackground		"blue" {	# default is white
		"AirTrafficMonitor" "LightSkyBlue"
		"Console"	"DarkGreen"
		"Links"		"maroon"
		"Xnest"		"teal"
		"emacs"		"yellow3"
		"root*"		"red"
		"tkined"	"goldenrod"
		"xcolors"	"PaleGreen"
		"xmahjongg"	"gold"
		"xterm"		"SteelBlue"
	}
	TitleForeground		"White" { # default is black
		"AirTrafficMonitor" "Black"
		"emacs"		"Black"
		"tkined"	"Black"
		"xcolors"	"Black"
		"xmahjongg"	"Black"
	}
}

Monochrome {
	BorderColor		"grey70"
	BorderTileBackground	"grey6"
	BorderTileForeground	"grey50"
	DefaultBackground	"Black"
	DefaultForeground	"White"
	IconBorderColor		"grey3"
	MapWindowBackground	"White"
	MapWindowForeground	"Black"
	MenuBackground		"Black"
	MenuForeground		"White"
	MenuTitleBackground	"grey98"
	MenuTitleForeground	"Black"
	MenuShadowColor		"gray50"
	TitleBackground		"grey40"
	TitleForeground		"White"
}

ifelse(COLOR, Yes, [

define([XLOAD_HL], [red])

MapWindowCurrentWorkSpace {
	"yellow"		# border
	"grey50"		# background
	"grey98"		# foreground
	# bitmap
}
MapWindowDefaultWorkSpace {
	"DarkGreen"		# border
	"grey98"		# background
	"grey50"		# foreground
	# bitmap
}

# Colours to be stored in the root window's _MIT_PRIORITY_COLORS
# property.  Clients _may_ elect to preserve these values when
# installing their own colormap.  Saving colours used in window
# manager features, such as borders, titles, and menus, could help
# avoid annoying colour-map flashing just because the cursor strays
# out, or when using the window menu.
#
# XXX Hopefully it's not a waste when the same colour is listed
# multiple times in this list!
#
# could only do this if PLANES <= 8
#
#SaveColor {
#	BorderColor
#	BorderTileBackground
#	BorderTileForeground
#	DefaultBackground
#	DefaultForeground
#	MenuBackground
#	MenuForeground
#	MenuTitleBackground
#	MenuTitleForeground
#	MenuShadowColor
#	TitleBackground
#	TitleForeground
#}

 ],
# else not COLOR
 [

define([XLOAD_HL], [grey90])

MapWindowCurrentWorkSpace {
	"White"
	"grey50"
	"grey98"
}
MapWindowDefaultWorkSpace {
	"Black"
	"grey98"
	"grey50"
}

# end not COLOR
])

# Give focus to windows whether they asked or not.  The window list is optional.
#
# First appeared in 4.0.0
#
#ForceFocus { "xalarm" }

# put the icon to the right-edge of its title -- this seems to work
# best for icon titles which expand when hovered over, and when the
# IconRegion gravity is to the East
#
IconJustification		"right"

# Can only be one directory!  Uses resource bitmapFilePath first...
#
IconDirectory	"~/lib/bitmaps"

ifdef([XPM], [
PixmapDirectory	"~/lib/pixmaps:~/lib/icons:/usr/X11/include/X11/pixmaps:/usr/X11/include/X11/pixmaps/ctwm:/usr/X11R7/include/X11/pixmaps:/usr/X11R7/include/X11/pixmaps/ctwm:/usr/X11R6/include/X11/pixmaps:/usr/X11R6/include/X11/pixmaps/ctwm:/usr/pkg/share/ctwm/images:/opt/pkg/share/ctwm/images:/usr/local/share/ctwm/images:"
])

ifdef([XPM], [UnknownIcon "xpm:unknown1.xpm"], [UnknownIcon "unknown.xbm"])

# N.B.:  it may be useful to enable ForceFocus on "hi-res" displays where any
# default icons may be too small, but of course this won't be useful
# until/unless larger icons are known to be available!

Icons {
	"Untitled"	"Excl"
	"xcmap"		"plaid"
	"XConsole"	"terminal"
  ifdef([XPM], [
	"auedit"	"xpm:audio_editor.xpm"
	"Control"	"xpm:mixer.xpm"
#	"emacs"		"xpm:emacs.xpm"
	"ghostview"	"xpm:ghostview.xpm"
	"log0"		"xpm:document-simple.xpm"
	"log1"		"xpm:document-simple.xpm"
	"log2"		"xpm:document-simple.xpm"
	"Mosaic"	"xpm:xmosaic.xpm"
#	"MPEG Play"	"xpm:movie.xpm"
	"pine"		"xpm:mail1.xpm"
	"spider"	"xpm:spider.xpm"
	"swissclock"	"xpm:xclock.xpm"
#	"xanim"		"xpm:movie.xpm"
	"xcalendar"	"xpm:datebook.xpm"
	"xclipboard"	"xpm:clipboard.xpm"
	"xedit"		"xpm:xedit.xpm"
	"xftp"		"xpm:xftp.xpm"
#	"xfractint"	"xpm:mandelbrot.xpm"
	"Xman"		"xpm:xman.xpm"
	"xpostit"	"xpm:postit.xpm"
	"XSm"		"xpm:xgrab.xpm"
	"xterm"		"xpm:term.xpm"
   ], [
	"emacs"		"gnu.xbm"
	"pine"		"letters"
	"xterm"		"Term"
	"lmclock"	"clock.xbm"
	"swissclock"	"clock.xbm"
   ])
}

# XXX for hi-res monitors we need new, bigger, cursors, but what about
# app-specific ones, such as Xterm's?
#
Cursors {
	Frame		"top_left_arrow"
	Title		"top_left_arrow"
	Icon		"top_left_arrow"
	IconMgr		"top_left_arrow"
	Move		"fleur"
	Resize		"fleur"
	Menu		"sb_left_arrow"
	Button		"hand2"
	Wait		"watch"
	Select		"target"
	Destroy		"pirate"
}

# XXX in theory we could/should use TWM_TYPE to protect all the
# WorkSpaces related stuff so that it's only seen if the value is
# "ctwm" -- then we could maybe still use this same file with twm.
# (and/or "vtwm" for use with vtwm, and maybe even "tvtwm" for use
# with tvtwm too, as they each also have a workspace manager, but
# using the pan/view style instead of the separate virtual desktop
# style of ctwm)

# The positioning of the WorkSpace window seems to ignore borders or
# something -- i.e. it's not the same as an ordinary client.  You need
# to specify the horizontal position 10 pixels East of where you'd
# position a client.
#
# Note also that if you manually resize the WorkSpace window the
# geometry shown while doing so bears no relation to the actual
# geometry in pixels, as given here.
#
WorkSpaceManagerGeometry	"WS_GEOM-WS_OFF+0" WS_COLS

# Note WS_ROWS x WS_COLS should be fulfilled by WorkSpaces names to match above
#
WorkSpaces {
	"Desktop"
	"Remote VMs"
	"Mail"

	"Home"
	"Xenful VMs"
	"Central"

	"Coding"
	"Testing 1"
	"FreeBSD"

	"Work 1"
	"Xentastic VMs"
	"Work 2"
}

# xxx I don't remember if this actually worked, and these days I don't have any
# applications specific to just one workspace (emacs in two, xterms everywhere)
#
#Occupy {
#	WorkSpace	"TkIned"	{ "tkined" }
#	WorkSpace	"Browsing"	{ "Netscape" "mozilla-bin" }
#}

# these match the Window Name (or "Name =" in the identify panel)
#
OccupyAll {
	"asclock"
	"Calculator"
	"NCD User Services:  Console"
	"NCD User Services:  Show Memory"
	"OccupyAll"		# a trick for starting xterms in all workspaces (using "-T OccupyAll")
	"lmclock"
	"oclock"
	"swisswatch"
	"swissclock"
	"taglog"
	"WorkSpaceManager"
	"xbiff"
	"xbuffy"		# only the main box window
	"xchrono"
	"xclock"
	"xconsole"
	"xcpustate"
	"xeyes"
	"xload"
	"xlogo"
	"xmailwatcher"
	"xnetload"
	"xosview"
	"xsm"
	"XSysStats"
	"XMMS"
	"XMMS Equalizer"
	"XMMS Playlist"
	"Dual Spectogram 1.2"
}

IconRegionAlignement		"border"
IconRegionJustification		"border"

# Note it seems the IconRegion must include the expanded icon title, which can
# be a bit long when we have pathnames in xterm titles.
#
# This isn't such a problem though if the "gravity" is North East and when the
# IconJustification is to the right -- the IconRegion can then be expanded to
# the left over other windows and normally, so long as there aren't too many
# icons to fit in the actual desired area, then expanding titles will have the
# needed room to expand to the left.
#
# A 10-pixel X 10-pixel grid keeps icons packed about as tight as you'd ever
# want them to be.  This is of course way too small a grid to keep arbitrary
# sized icons centred in a box.  It also means little icons can mess up the
# arrangement of normal-sized icons.  Too bad we can't force them on the grid
# such that they overlap if they're too big.  Alternately if the arrangement was
# always shuffled on every change such that all similar sized icons were kept
# together....  And how about shrinking them to always fit and using a magnifier
# like the Aqua dock?
#
# On a big enough screen there should be room to keep a little xterm open above
# xconsole in the bottom right and so the icon region will be above that.
#
# A region 1/4 the height of the screen will then allow a reasonably tall little
# xterm.
#
# On smaller screens the little xterm may obscure the icons.  See notes for
# $XTERM_LITTLE_OPTS in ~/.xinitrc.
#
# (run through M4 as described above then use "xlogo -geometry XXXxYYY" to see
# where this will be!)
#
# xxx this may not be wide enough on smaller screens, but on a big hi-res screen
# it should be OK
#
define([IR_GEOM], eval(WS_WIDTH + WS_OFF)[x]eval(HEIGHT / 4)[-0+]eval(WS_HEIGHT + (2 * XloadHeight) + (6 * TDBORDERWIDTH)))
#
ifelse(eval(X_RESOLUTION >= 8000 && Y_RESOLUTION >= 8000), 1,
  [define([IR_GRID], [100])],
# else
  [ifelse(eval(X_RESOLUTION >= 4500 && Y_RESOLUTION >= 4500), 1,
    [define([IR_GRID], [50])],
#  else
    [define([IR_GRID], [10])])
  ]
)
IconRegion	"IR_GEOM" North East IR_GRID IR_GRID

# Use an Icon Manager for xterms.
#
# n.b.: A height of zero allows it to grow vertically as needed, and the 4
# borders for the width calculation are the borders _between_ the three xloads
# -- the outside borders are accounted for in the IconManager's borders.
#
define([ICONMGR_GEOM], eval((3 * XloadWidth) + (4 * TDBORDERWIDTH))[x0][-]ClockOffH[+]eval(WS_HEIGHT + (2 * XloadHeight) + (6 * TDBORDERWIDTH)))
IconManagerGeometry		"ICONMGR_GEOM" 2
#
ShowIconManager
#
IconifyByUnmapping {
	"xterm"
}
#
IconManagerShow {
	"xterm"
}
# hmmm... this must be just a boolean, when used with IconManagerShow
IconManagerDontShow
## {
##	"asclock"
##	"lmclock"
##	"oclock"
##	"swisswatch"
##	"swissclock"
##	"WorkSpaceManager"
##	"xbiff"
##	"XBuffy"
##	"xchrono"
##	"xclock"
##	"xcpustate"
##	"xeyes"
##	"xload"
##	"xlogo"
##	"xnetload"
##	"xosview"
##	"XSysStats"
##}

NoBorder {
	"swisswatch"
	"swissclock"
	"xchrono"
	"xeyes"
}

NoTitle {
	"TWM Icon Manager"
	"WorkSpaceManager"
	"asclock"
	"lmclock"
	"oclock"
	"swisswatch"
	"swissclock"
	"xbiff"
	"xbuffy"		# only the main box window
	"xchrono"
	"xclock"
	"xcpustate"
	"xeyes"
	"xli"
	"xload"
	"xlogo"
	"xnetload"
	"xosview"
	"XSysStats"
	"xv"
	"xwud"
	"XMMS"
	"XMMS Equalizer"
	"XMMS Playlist"
	"Dual Spectogram 1.2"
}

NoHighlight {
	"swisswatch"
	"swissclock"
	"xchrono"
	"xeyes"
}

WarpCursor {
	"emacs"		# damn thing gets a resource name based on argv[0]!
	"Links"
	"xcalc"
	"xcalendar"
	"xclipboard"
	"xcutsel"
	"xedit"
	"xftp"
	"xmahjongg"
	"xmail"
	"xman"
	"xmh"
	"xhelp"
	"xrn"
	"xshell"
	"xtalk"
	"xterm"
}

WindowGeometries {
	# xmahjongg cannot handle standard geometry positioning params (it does do size)
 ifelse(eval(FontYDPI > 110), 1, [
	"xmahjongg"	"2000x1500+2200+0"
 ])
}

# n.b.: this is essentially the same as the NoTitle list....
WindowRingExclude {
	"TWM Icon Manager"
	"WorkSpaceManager"
	"asclock"
	"lmclock"
	"oclock"
	"swisswatch"
	"swissclock"
	"xbiff"
	"xbuffy"		# only the main box window
	"xchrono"
	"xclock"
	"xcpustate"
	"xeyes"
	"xli"
	"xload"
	"xlogo"
	"xnetload"
	"xosview"
	"XSysStats"
	"xv"
	"xwud"
}

# These have an optional window list parameter
#
DontSqueezeTitle
NoTitleHighlight
OpaqueResize
OpaqueMove

Function "deiconify-and-raise"	{ f.deiconify f.raise }
Function "forcemove-or-lower"	{ f.forcemove f.deltastop f.lower }
Function "forcemove-or-raise"	{ f.forcemove f.deltastop f.raise }
Function "forcemove-or-iconify"	{ f.forcemove f.deltastop f.iconify }
Function "move-or-lower"	{ f.move f.deltastop f.lower }
Function "move-or-raise"	{ f.move f.deltastop f.raise }
Function "move-or-iconify"	{ f.move f.deltastop f.iconify }
Function "movepack-or-lower"	{ f.movepack f.deltastop f.lower }
Function "movepack-or-raise"	{ f.movepack f.deltastop f.raise }
Function "movepack-or-iconify"	{ f.movepack f.deltastop f.iconify }
Function "resize-or-raise"	{ f.raise f.deltastop f.resize }
Function "resize-or-lower"	{ f.lower f.deltastop f.resize }
Function "refresh-ws"		{ f.HideWorkSpaceMgr f.ShowWorkSpaceMgr f.Refresh }

# Set some useful bindings.  Sort of uwm-ish, sort of simple-button-ish
#
# Note "mod2" here means the "command" key on OSX Xquartz
# Note "meta" here means the "option" key on OSX Xquartz
# Note "shift" needs to be quoted to avoid being seen as an m4 macro
#
#Button	= KEYS		: CONTEXT	: FUNCTION
#-------------------------------------------------
Button1 =		: root		: f.menu "quickies"
Button2 =		: root		: f.menu "TwmWindows"
Button3 =		: root		: f.menu "defops"

Button1 = control	: root		: f.menu "TwmAllWindows"
Button2 = control	: root		: f.menu "TwmIcons"
Button3 = control	: root		: f.menu "winops"

Button1 = meta		: root		: f.menu "applications"
Button2 = meta		: root		: f.menu "preferences"
Button3 = meta		: root		: f.menu "wmops"

Button1 = mod2		: root		: f.menu "applications"
Button2 = mod2		: root		: f.menu "preferences"
Button3 = mod2		: root		: f.menu "misc"

Button1 = [shift]	: root		: f.menu "xterms"
Button2 = [shift]	: root		: f.menu "consoles"
Button3 = [shift]	: root		: f.menu "monitors"

Button1 = control	: icon		: f.menu "winops"
Button2 = control	: icon		: f.iconify
Button3 = control	: icon		: f.raiselower

Button1 = meta		: icon|window	: f.function "forcemove-or-raise"
Button2 = meta		: icon|window	: f.function "forcemove-or-iconify"
Button3 = meta		: icon|window	: f.function "forcemove-or-lower"

Button1 =		: title		: f.function "movepack-or-raise"
Button2 =		: title		: f.raiselower
Button3 =		: title		: f.function "movepack-or-lower"

Button1 = [shift]	: title		: f.function "movepack-or-lower"
Button2 = [shift]	: title		: f.raiselower
Button3 = [shift]	: title		: f.function "movepack-or-raise"

Button1 =		: frame		: f.function "resize-or-raise"
Button2 =		: frame		: f.raiselower
Button3 =		: frame		: f.function "resize-or-lower"

Button1 = meta		: frame|title	: f.function "forcemove-or-raise"
Button2 = meta		: frame|title	: f.raiselower
Button3 = meta		: frame|title	: f.function "forcemove-or-lower"

Button1 =		: icon		: f.function "move-or-iconify"
Button2 =		: icon		: f.iconify
Button3 =		: icon		: f.lower

"i"	=		: icon		: f.iconify
"m"	= mod2		: icon		: f.iconify

Button1 = meta		: icon		: f.function "forcemove-or-iconify"
Button2 = meta		: icon		: f.iconify
Button3 = meta		: icon		: f.lower

Button1 =		: iconmgr	: f.function "deiconify-and-raise"
Button1 = [shift]	: iconmgr	: f.raise
Button1 = control	: iconmgr	: f.raise
Button1 = mod2		: iconmgr	: f.iconify
Button2 =		: iconmgr	: f.raiselower
Button2 = mod2		: iconmgr	: f.lower
Button3 =		: iconmgr	: f.occupyall # ???

"Return"=		: iconmgr	: f.iconify
"i"	=		: iconmgr	: f.iconify
"F16"	=		: iconmgr	: f.iconify

"F17"	=		: iconmgr	: f.raiselower

# XXX these only wander around one of the entries, not all
"Left"	= 		: iconmgr	: f.backiconmgr
"Right"	= 		: iconmgr	: f.forwiconmgr
"Up"	= 		: iconmgr	: f.upiconmgr
"Down"	= 		: iconmgr	: f.downiconmgr
# XXX these do no better
"n"	= 		: iconmgr	: f.forwmapiconmgr
"p"	= 		: iconmgr	: f.backmapiconmgr

"Help"	=		: root		: f.version
"F19"	=		: root		: f.version

# xxx try out <cmd>-Tab ala macos, but using <meta>, aka <Option>.... (emacs may
# use <cmd>-Tab, eg. in Magit)
#
"Tab"	= meta		: all		: f.warpring "next"
"Tab"	= meta|[shift]	: all		: f.warpring "prev"
#"m"	= meta		: all		: f.iconify

"Left"	= mod2		: root|workspace: f.leftworkspace
"Right"	= mod2		: root|workspace: f.rightworkspace
"Down"	= mod2		: root|workspace: f.downworkspace
"Up"	= mod2		: root|workspace: f.upworkspace
"F7"	=		: root|workspace: f.prevworkspace # "<<"
"F9"	=		: root|workspace: f.nextworkspace # ">>"
"F13"	=		: root|workspace: f.prevworkspace
"F14"	=		: root|workspace: f.nextworkspace
"Prior"	=		: root|workspace: f.prevworkspace
"Next"	=		: root|workspace: f.nextworkspace
"F16"	=		: root|workspace: f.prevworkspace
"F17"	=		: root|workspace: f.nextworkspace

# XXX Hmmm... without NoTitleFocus keyboard focus always goes fully to the app,
# (it should have been called NotTitleAppFocus) so these bindings are "hidden",
# however even with NoTitleFocus it still never seems to go to the frame, only
# to the titlebar.
#
# XXX also, NoTitleFocus makes focus switching a bit "lazy", perhaps exacerbated
# by mouse acceleration.
#
"i"	=		: title		: f.iconify
"m"	= mod2		: title		: f.iconify

"Right"	= control	: frame|title	: f.changesize "right +10"
"Left"	= control	: frame|title	: f.changesize "right -10"
"Down"	= control	: frame|title	: f.changesize "bottom +10"
"Up"	= control	: frame|title	: f.changesize "bottom -10"

"Right"	= [shift]	: frame|title	: f.changesize "left +10"
"Left"	= [shift]	: frame|title	: f.changesize "left -10"
"Down"	= [shift]	: frame|title	: f.changesize "top +10"
"Up"	= [shift]	: frame|title	: f.changesize "top -10"

"Left"	=		: frame|title	: f.jumpleft "2"
"Right" =		: frame|title	: f.jumpright "2"
"Down"	=		: frame|title	: f.jumpdown "2"
"Up"	=		: frame|title	: f.jumpup "2"

"Left"	= mod2		: frame|title	: f.jumpleft "1"
"Right" = mod2		: frame|title	: f.jumpright "1"
"Down"	= mod2		: frame|title	: f.jumpdown "1"
"Up"	= mod2		: frame|title	: f.jumpup "1"

"Left"	= meta		: frame|title	: f.pack "left"
"Right" = meta		: frame|title	: f.pack "right"
"Up"	= meta		: frame|title	: f.pack "top"
"Down"	= meta		: frame|title	: f.pack "bottom"

"Left"	= [shift]|meta	: frame|title	: f.fill "left"
"Right" = [shift]|meta	: frame|title	: f.fill "right"
"Up"	= [shift]|meta	: frame|title	: f.fill "top"
"Down"	= [shift]|meta	: frame|title	: f.fill "bottom"

# icons and menus/operations for window "Title" buttons
#
ifdef([XPM], [
LeftTitleButton ":xpm:menu" = f.menu "winops"
LeftTitleButton	":xpm:cross" = f.delete
#
RightTitleButton ":xpm:vbar" = f.menu "fills"
RightTitleButton ":xpm:box" = f.menu "zooms"
], [
LeftTitleButton "menu16" = f.menu "winops"
LeftTitleButton	"star" = f.delete
#
RightTitleButton "scales" = f.menu "fills"
RightTitleButton "icon" = f.menu "zooms"
])

#
#	And the menus, with all of the usual things...
#
menu "quickies"
{
	"Short Cuts"		f.title
	"Move & Pack"		f.movepack
	"Move"			f.move
	"Resize"		f.resize
	"Lower"			f.lower
	"Raise"			f.raise
	"RaiseIcons"		f.raiseicons
	"Iconify"		f.iconify
	"Identify"		f.identify
	"Occupy ..."		f.occupy
	"Occupy All"		f.occupyall
	"Vanish"		f.vanish
	"Icon Manager..."	f.menu "iconmgr"
	""			f.separator
 ifdef([ON_OSX], [
	""			f.separator
	"Pasteboard Copy"	!"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} -T 'Paste text to PasteBoard here' -e pbcopy &"
	""			f.separator
 ])
	"Toggle workspace"	f.togglestate
	"Screen Refresh"	f.refresh
	"WS Refresh"		f.function "refresh-ws"
	"Window Refresh"	f.winrefresh
	"Save"			f.saveyourself
	""			f.separator
	"WinDelete"		f.delete
	"WinDelete or Destroy"	f.deleteordestroy
	"Kill"			f.destroy
	""			f.separator
	"Xauth to..."		f.menu "xauths"
	""			f.separator
	"emacs @CLIENTHOST"	!"${MY_EMACS} -fh &"
 ifdef([X11SERVER], [
	"emacs @X11SERVER"	!"set -i; . ./.shrc; onx11server -X X11SERVER \"${MY_EMACS} -fh\" &"
 ])
 ifdef([AT_LOCAL], [
	"emacs @more"		!"set -i; . ./.shrc; onx11server -X more.local 'emacs -fh' &"
 ])
	"Emacs Everywhere..."	f.menu "emacs"
	#
	""			f.separator
	"links -g @CLIENTHOST"	!"links -g &"
 ifdef([X11SERVER], [
	"links -g @X11SERVER"	!"set -i; . ./.shrc; onx11server -n -X X11SERVER 'links -g' &"
 ])
 ifdef([AT_LOCAL], [
	"links -g @more"	!"set -i; . ./.shrc; onx11server -n -X more.local 'links -g' &"
 ])
	# xxx unfortunately duckduckgo.com isn't very usable with links
	"DDG something"		!"links -g https://html.duckduckgo.com/html/ &"
	"Google something"	!"links -g https://google.ca/ &"
	""			f.separator
 ifdef([ON_OSX], [
	"Mac OS X Apps..."	f.menu "osx-apps"
 ], [
	"Xclipboard"		!"xclipboard &"
 ])
	""			f.separator
	"UXterm @CLIENTHOST"	!"eval uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} ${XTERM_LOGIN_OPTS} &"
	"UXterm-big @CLIENTHOST" !"eval uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS} ${XTERM_LOGIN_OPTS} &"
	#
 ifdef([X11SERVER], [
	"Xterm @X11SERVER"	!"set -i; . ./.shrc; onx11server -n -X X11SERVER \"xterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @X11SERVER"	!"set -i; . ./.shrc; onx11server -n -X X11SERVER \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"Xterm-big @X11SERVER"	!"set -i; . ./.shrc; onx11server -n -X X11SERVER \"xterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @X11SERVER"	!"set -i; . ./.shrc; onx11server -n -X X11SERVER \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
 ])
 ifdef([AT_LOCAL], [
	"UXterm @more"		!"set -i; . ./.shrc; onx11server -n -X more.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @more"	!"set -i; . ./.shrc; onx11server -n -X more.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
 ])
	"Xterm's Everywhere..."	f.menu "xterms"
	""			f.separator
	"Console Server"	f.menu "consoles"
	""			f.separator
	"TermSrvr Telnets"	f.menu "termservers"
	""			f.separator
 ifdef([ON_OSX], [
 ], [
	"Xlock"			!"xlock -mode flame &"
 ])
	"Exit..."		f.menu "exit"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "consoles"
{
	"Console Server"	f.title
  define([CONSOLE_REP], [
	"$1 []"			!"uxterm -fg lightgreen -bg black -geometry 132x66 -fs 7.5 ${XTERM_OPTS} -n $1 -T 'console:$1' -e console $1 &"
  ])
	CONSOLE_REP(xenful)
	CONSOLE_REP(nbtcur)
	CONSOLE_REP(more)
	""			f.separator
	CONSOLE_REP(xentastic)
	CONSOLE_REP(nbtest)
	CONSOLE_REP(nb10)
	CONSOLE_REP(nbday)
	CONSOLE_REP(fezzik)
	""			f.separator
	CONSOLE_REP(once)
# powered off, but enabled in tserver
	CONSOLE_REP(isit)
# not connected
#	CONSOLE_REP(bbb-1)
#	CONSOLE_REP(rpi-1)
#	CONSOLE_REP(lilbit)
#	CONSOLE_REP(building)
#	CONSOLE_REP(future)
#	CONSOLE_REP(freebsd)
#	CONSOLE_REP(historically)
#	CONSOLE_REP(whats)
#	CONSOLE_REP(flipping)
# running under UTM on very, but with vga console
#	CONSOLE_REP(nbt)
#	CONSOLE_REP(nbt2)
  undefine([CONSOLE_REP])
	""			f.separator
	"Pin this menu"		f.pin
}

menu "termservers"
{
	"Term Srvr Telnets"	f.title
	"telnet controlling"	!"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS} -n controlling -T 'controlling Virtual Console' -e telnet controlling.local 2000 &"
	""			f.separator
  define([CONTROLLING_REP], [
# n.b.:  with DejaVuSansMono six of these will fit on the main area of the big
# Retina 6K Pro screen
	"Controlling-20$1"	!"uxterm -geometry 132x66 -fs 6 ${XTERM_OPTS} -n Ctrl20$1 -T 'Controlling-20$1' -e telnet controlling.local 20$1 &"
  ])
###	CONTROLLING_REP(01)	# this is the physical console
	CONTROLLING_REP(02)
	CONTROLLING_REP(03)
	CONTROLLING_REP(04)
	CONTROLLING_REP(05)
	CONTROLLING_REP(06)
	CONTROLLING_REP(07)
	CONTROLLING_REP(08)
  undefine([CONTROLLING_REP])
	""			f.separator
	"Pin this menu"		f.pin
}

menu "defops"
{
	"TWM_TYPE - Version TWM_VERSION"	f.title
	"Window Operations..."	f.menu "winops"
	"Window Manager..."	f.menu "wmops"
	""			f.separator
	"Applications..."	f.menu "applications"
	"Preferences..."	f.menu "preferences"
	""			f.separator
	"Exit..."		f.menu "exit"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "winops"
{
	"Window Operations"	f.title
	"Save Geometry"		f.savegeometry
	"Restore Geometry"	f.restoregeometry
	""			f.separator
	"Move"			f.move
	"MovePack"		f.movepack
	"MovePush"		f.movepush
	""			f.separator
	"Resize"		f.resize
	""			f.separator
	"Raise"			f.raise
	"Lower"			f.lower
	"Circle Up"		f.circleup
	"Circle Down"		f.circledown
	""			f.separator
	"Occupy All"		f.occupyall
	"Vanish"		f.vanish
	"Occupy"		f.occupy
	"Occupy Next"		f.movetonextworkspace
	"Occupy Prev"		f.movetoprevworkspace
	""			f.separator
	"Refresh"		f.winrefresh
	"Save"			f.saveyourself
	"Identify"		f.identify
	""			f.separator
	"Zoom..."		f.menu "zooms"
	"Pack..."		f.menu "packs"
	"Fill..."		f.menu "fills"
	""			f.separator
	"Squeeze (toggle)"	f.squeeze
	"Iconify"		f.iconify
	"DeIconify"		f.deiconify
	""			f.separator
	"Focus"			f.focus
	"Unfocus"		f.unfocus
	""			f.separator
	"WarpRing (toggle)"	f.ring
	""			f.separator
	"Delete"		f.delete
	"Delete Or Destroy"	f.deleteordestroy
	"Kill"			f.destroy
	""			f.separator
	"Pin this menu"		f.pin
}

menu "wmops"
{
	"Window Manager"	f.title
	"Icon Manager..."	f.menu "iconmgr"
	"WorkSpace Summary..."	f.menu "TwmWindows"
	"Window Summary..."	f.menu "TwmAllWindows"
	""			f.separator
	"Toggle workspace"	f.togglestate
	"ShowWorkSpaceManager"	f.showWorkspaceMgr
	"HideWorkSpaceManager"	f.hideWorkspaceMgr
#	"Adopt Window"		f.adoptwindow	# gone in 4.1.0
	"Identify Window"	f.identify
	""			f.separator
	"Refresh Screen"	f.refresh
	"Refresh WS"		f.function "refresh-ws"
	"Refresh Window"	f.winrefresh
	"Save Window"		f.saveyourself
	""			f.separator
	"Restart TWM_TYPE"	f.restart
# CTWM_VERSION_* first appeared in 4.0.0
 ifdef([CTWM_VERSION_MAJOR],
  ifelse(eval((CTWM_VERSION_MAJOR >= 4 && CTWM_VERSION_MINOR >= 2) ||
              ((CTWM_VERSION_MAJOR == 4 && CTWM_VERSION_MINOR == 1) &&
	       index(CTWM_VERSION_ADDL, [-post]) == 0)), 1, [
	"Start Old TWM"		f.startwm "LC_ALL=C twm -v -v"
  ])
 )
	""			f.separator
	"About TWM_TYPE TWM_VERSION"	f.version
	""			f.separator
	"Pin this menu"		f.pin
}

menu "packs"
{
	"Window Packing"	f.title
	"Save Geometry"		f.savegeometry
	"Restore Geometry"	f.restoregeometry
	""			f.separator
	"To-the-Left"		f.pack "left"
	"To-the-Right"		f.pack "right"
	"To-the-Top"		f.pack "top"
	"To-the-Bottom"		f.pack "bottom"
}

menu "zooms"
{
	"Zoom to Screen"	f.title
	"Save Geometry"		f.savegeometry
	"Restore Geometry"	f.restoregeometry
	""			f.separator
	"Top-to-bottom"		f.zoom
	"Full-Screen"		f.fullzoom
	"To-the-Left"		f.leftzoom
	"To-the-Right"		f.rightzoom
	"To-the-Top"		f.topzoom
	"To-the-Bottom"		f.bottomzoom
}

menu "fills"
{
	"Zoom to Fill"		f.title
	"Save Geometry"		f.savegeometry
	"Restore Geometry"	f.restoregeometry
	""			f.separator
	"Top-to-bottom"		f.zoom
	"Full-Screen"		f.fullzoom
	"Fill-to-the-Left"	f.fill "left"
	"Fill-to-the-Right"	f.fill "right"
	"Fill-to-the-Top"	f.fill "top"
	"Fill-to-the-Bottom"	f.fill "bottom"
}

menu "iconmgr"
{
	"Icon Manager"		f.title
	"Show Iconmgr"		f.showiconmgr
	"Hide Iconmgr"		f.hideiconmgr
	"Sort"			f.sorticonmgr
	"Pin this menu"		f.pin
}

# "personal preference" adjustments
menu "preferences"
{
	"Preferences"		f.title
	"Viewres"		!"viewres &"
	"Editres"		!"editres &"
	"xprop"			!"xprop &"
	"Query"			!"xset q"
	"Xkeycaps"		!"xkeycaps &"
	"Auto Repeat On"	!"xset r on"
	"Auto Repeat Off"	!"xset r off"
	"Bell On"		!"xset b 100 800"
	"Bell Off"		!"xset b 0"
	"Click On"		!"xset c on"
	"Click Off"		!"xset c off"
	"Mouse Fast"		!"xset m 9 5"
	"Mouse Normal"		!"xset m 6 3"
	"Mouse Slow"		!"xset m 1 1"
	"Mouse Default"		!"xset m default"
	"Bug Compat On"		!"xset bc"
	"Bug Compat Off"	!"xset -bc"
	"ReHash FP"		!"xset fp rehash"
 ifelse(COLOR, Yes,
	["Colour Map Ctl..."	f.menu "cmap"], [])
	"Screen Saver..."	f.menu "screensaver"
	"Keyboard LEDs..."	f.menu "leds"
	""			f.separator
	"Pin this menu"		f.pin
}

ifelse(COLOR, Yes,
[menu "cmap"
{
	"Colour Map Control"	f.title
	"View Default Map"	!"xcmap &"
	""			f.separator
	"Set All"		!"xstdcmap -all -verbose &"
	"Set Best"		!"xstdcmap -best -verbose &"
	"Set Default"		!"xstdcmap -default -verbose &"
	"Set Grey"		!"xstdcmap -gray -verbose &"
	"Set Red"		!"xstdcmap -red -verbose &"
	"Set Green"		!"xstdcmap -green -verbose &"
	"Set Blue"		!"xstdcmap -blue -verbose &"
	""			f.separator
	"Delete default"	!"xstdcmap -delete default -verbose &"
	"Delete best"		!"xstdcmap -delete best -verbose &"
	"Delete grey"		!"xstdcmap -delete gray -verbose &"
	"Delete red"		!"xstdcmap -delete red -verbose &"
	"Delete green"		!"xstdcmap -delete green -verbose &"
	"Delete blue"		!"xstdcmap -delete blue -verbose &"
	""			f.separator
	"Pin this menu"		f.pin
}
], [])

menu "screensaver"
{
	"Screen Saver Features"	f.title
	"Set Timer..."		f.menu "screensavertime"
	"Enable"		!"xset s on"
	"Disable"		!"xset s off"
	"Use Video Blanking"	!"xset s blank"
	"Use Background Pattern" !"xset s noblank"
	""			f.separator
	"Set Defaults"		!"xset s default"
}

menu "screensavertime"
{
	"Enable Screen Saver after:"	f.title
	"5  sec"			!"xset s 5"
	"30 sec"			!"xset s 30"
	"1  min"			!"xset s 60"
	"5  min"			!"xset s 300"
	"10 min"			!"xset s 600"
	"15 min"			!"xset s 900"
}

menu "leds"
{
	"Keyboard LED Control"	f.title
	"all on"		!"xset led on"
	"all off"		!"xset led off"
	"1 on"			!"xset led 1"
	"1 off"			!"xset -led 1"
	"2 on"			!"xset led 2"
	"2 off"			!"xset -led 2"
	"3 on"			!"xset led 3"
	"3 off"			!"xset -led 3"
	"4 on"			!"xset led 4"
	"4 off"			!"xset -led 4"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "exit"
{
	"Exit CTWM"				f.title
	"Select confirm to end your session."	f.nop
	""					f.separator
	"        No...."			f.nop
	"        Confirm...."			f.quit
}

menu "applications"
{
	"Applications"			f.title
	"Xauth to..."			f.menu "xauths"
	""				f.separator
 ifdef([ON_OSX], [
	"Mac OS X Apps..."		f.menu "osx-apps"
	""				f.separator
 ])
	""				f.separator
	"Xterm's Everywhere..."		f.menu "xterms"
	"Emacs Everywhere..."		f.menu "emacs"
	""				f.separator
	"Console Server"		f.menu "consoles"
	""				f.separator
	"Monitors..."			f.menu "monitors"
	"Locks..."			f.menu "locks"
	"Backgrounds..."		f.menu "backgrounds"
	"Audio Tools..."		f.menu "audios"
	"Graphics Tools..."		f.menu "graphics"
	"Other Tools..."		f.menu "tools"
	"Miscellaneous..."		f.menu "miscapps"
	"Games..."			f.menu "games"
	""				f.separator
	"Pin this menu"			f.pin
}

menu "audios"
{
	"Audio Tools"			f.title
	"xmms"				!"xmms -m &"
	""				f.separator
	"audemo"			!"cd HOME/lib/sounds; audemo &"
	"auedit"			!"auedit &"
	"aupanel"			!"aupanel &"
	"auphone"			!"auphone &"
	"auwave"			!"auwave &"
	""				f.separator
	"xcdplayer"			!"xcdplayer &"
	"xmcd"				!"xmcd &"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "graphics"
{
	"Graphics Applications"		f.title
	"xart"				!"xart &"
	"xpaint"			!"xpaint &"
	"xfig"				!"xfig &"
	"tgif"				!"tgif &"
	"xbmbrowser"			!"xbmbrowser &"
	"gimp"				!"gimp &"
	"xcol"				!"xcol &"
	"xcolor"			!"xcolor &"
	"xcolsel"			!"xcolsel &"
	"xvgr"				!"xvgr &"
	"xpdf"				!"xpdf &"
	"xmag"				!"xmag &"
	"xditview"			!"xditview &"
	"xcmap"				!"xcmap &"
	"xwd > ~/tmp/win.xwd"		!"xwd > HOME/tmp/win.xwd &"
	"xwd -root > ~/tmp/root.xwd"	!"xwd -root > HOME/tmp/root.xwd &"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "tools"
{
	"Miscellaneous Tools"		f.title
	"editres"			!"editres &"
	"viewres"			!"viewres &"
	"xclipboard"			!"xclipboard &"
	"xcutsel"			!"xcutsel &"
	"xfontsel"			!"xfontsel &"
	"xkeycaps"			!"xkeycaps &"
	"xdpr"				!"xdpr -device ps &"
	""				f.separator
	"Show Environment"		!"env | sort | xmessage -file - &"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "miscapps"
{
	"Miscellaneous Applications"	f.title
	"xalarm"			!"xalarm &"
 ifelse(eval(FontYDPI > 110), 1, [
# 800 is barely wide enough for the widest button (trunc), and 500 is also a
# little short for the buttons in the default 9pt font, except making it taller
# than 540 obscures too much of the "degree" indicators (they are obscured by
# the value box -- click in it to see its extent)
	"xcalc"				!"xcalc -stipple -geometry 800x540 &"
 ], [
	"xcalc"				!"xcalc -stipple &"
 ])
	"xcalendar"			!"xcalendar &"
	"xedit"				!"xedit &"
	"xfd"				!"xfd &"
	"xftp"				!"xftp &"
	"xmail"				!"xmail &"
	# xman can't handle UTF-8 output from nroff...
	"xman"				!"LC_ALL=en_us.iso8859-1 xman &"
	"xmh"				!"xmh &"
	# a blank xpdf has to be resized before you can find the quit button....
	"xpdf"				!"xpdf &"
	"xpostit"			!"xpostit &"
	"xplan"				!"xplan &"
	"xrolodex"			!"xrolodex &"
	"xtalk"				!"xtalk &"
	"xhelp"				!"xhelp &"
	"xrn"				!"xrn &"
	"xshell"			!"xshell &"
	"xvnews"			!"xvnews &"
	"xvtdl"				!"xvtdl &"
	"axe"				!"axe &"
	"gv"				!"gv &"
	"plan"				!"plan &"
	"pan"				!"pan &"
	"timekeeper"			!"timekeeper &"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "emacs"
{
	"Emacsen"		f.title
	"@CLIENTHOST"		!"${MY_EMACS} -fh &"
 ifdef([X11SERVER], [
	"@X11SERVER"		!"set -i; . ./.shrc; onx11server -n -X X11SERVER \"${MY_EMACS} -fh\" &"
 ])
 ifdef([AT_LOCAL], [
	"@more"			!"set -i; . ./.shrc; onx11server -n -X more.local \"emacs -fh\" &"
	"@xenful"		!"set -i; . ./.shrc; onx11server -n -X xenful.local \"emacs -fh\" &"
	"@xentastic"		!"set -i; . ./.shrc; onx11server -n -X xentastic.local \"emacs -fh\" &"
])
	""			f.separator
	"Pin this menu"		f.pin
}

menu "monitors"
{
	"Monitors"		f.title
	"xconsole"		!"xconsole -geometry 500x120-0-0 -notify -verbose &"
	"xconsole x-errors"	!"xconsole -geometry 500x120-0-0 -notify -verbose -file HOME/.xsession-errors &"
	"xconsole x-errors-DISPLAY" !"xconsole -geometry 500x120-0-0 -notify -verbose -file HOME/.xsession-errors-`echo ${DISPLAY} | sed 's/\.[[0-9]]*$//'` &"
	""			f.separator
	"xclock"		!"xclock -geometry ClockGeom &"
	"xclock -digital"	!"LC_CTYPE=C xclock -geometry DClockGeom -face :size=10 -digital -update 1 -chime &"
	"swissclock"		!"swisswatch -name swissclock -geometry ClockGeom &"
	# n.b.:  "-local" doesn't give a timezone, just a name for the local time zone!
	"xchrono"		!"xchrono -geometry XchronoGeom ${XchronoOpts} &"
	"asclock"		!"asclock -shape -position -200+234 &"
	""			f.separator
	"xbiff"			!"xbiff -rv -bw 0 &"
	"xlbiff"		!"xlbiff &"
	"xbuffy"		!"xbuffy -geometry 80x25-0+235 -shortnames -header 0 &"
	"xbuffy w/-acmd"	!"xbuffy -geometry 80x25-0+235 -shortnames -header 0 -acmd \"${AUDIOPLAYER} HOME/lib/sounds/newmail &\" &"

	""			f.separator
	"xload"			!"xload -geometry XloadGeom -hl XLOAD_HL &"
 ifdef([X11SERVER], [
	"xload @X11SERVER"	!"set -i; . ./.shrc; onx11server -n -X X11SERVER \"xload -geometry 120x40-200+48 -hl XLOAD_HL\" &"
 ])
 ifdef([AT_VERY_LOCAL], [
	"air-traffic-monitor"	!"uxterm -tn xterm-256color -geometry 80x25+eval((WIDTH / 2) - ( 3 * HorizDPI))-eval(VertDPI * 2) -fs 9 ${XTERM_OPTS} -fc 5 -n AirTrafficMonitor -T AirTrafficMonitor -e air-traffic-monitor &"
 ])
 ifdef([AT_LOCAL], [
#	"xload @building"	!"set -i; . ./.shrc; onx11server -n -X building.local \"xload -geometry ${XloadGeomBuilding} -hl red\" &"
	"xload @more"		!"set -i; . ./.shrc; onx11server -n -X more.local \"xload -geometry ${XloadGeomMore} -hl red\" &"
	"xload @central"	!"set -i; . ./.shrc; onx11server -fSY -X central.avoncote.ca \"xload -geometry ${XloadGeomCentral} -hl red\" &"
#	"xload @future"		!"set -i; . ./.shrc; onx11server -n -X future.local \"xload -geometry ${XloadGeomFuture} -hl red\" &"
	"xload @xenful"		!"set -i; . ./.shrc; onx11server -n -X xenful.local \"xload -geometry ${XloadGeomXenful} -hl red\" &"
	"xload @xentastic"	!"set -i; . ./.shrc; onx11server -n -X xentastic.local \"xload -geometry ${XloadGeomXentastic} -hl red\" &"
	"xload @xentral"	!"set -i; . ./.shrc; onx11server -fSY -X woods@xentral.avoncote.ca \"xload -geometry ${XloadGeomXentral} -hl red\" &"
	"xload @once"		!"set -i; . ./.shrc; onx11server -n -X once.local \"xload -geometry ${XloadGeomOnce} -hl red\" &"
	#
#	"xload @historically"	!"set -i; . ./.shrc; onx11server -n -X historically.local \"xload -geometry ${XloadGeomHistorically} -hl red\" &"
	"xload @b2"		!"set -i; . ./.shrc; onx11server -fSY -X woods@b2.avoncote.ca  \"xload -geometry ${XloadGeomB2} -hl red\" &"
	"xload @fezzik"		!"set -i; . ./.shrc; onx11server -fS -X fezzik.local \"xload -geometry ${XloadGeomFezzik} -hl red\" &"
	"xload @nbtest"		!"set -i; . ./.shrc; onx11server -n -X nbtest.local \"xload -geometry ${XloadGeomNbtest} -hl red\" &"
	"xload @nbtcur"		!"set -i; . ./.shrc; onx11server -n -X nbtcur.local \"xload -geometry ${XloadGeomNbtcur} -hl red\" &"
	"xload @nb10"		!"set -i; . ./.shrc; onx11server -n -X nb10.local \"xload -geometry ${XloadGeomNb10} -hl red\" &"
	"xload @nbday"		!"set -i; . ./.shrc; onx11server -fS -X nbday.local \"xload -geometry ${XloadGeomNbday} -hl red\" &"
 ])
 ifdef([X11SERVER], [
	"xosview @X11SERVER"	!"set -i; . ./.shrc; onx11server -n -X X11SERVER \"xosview\" &"
	"xcpustate @X11SERVER"	!"set -i; . ./.shrc; onx11server -n -X X11SERVER \"xcpustate -geometry 190x20-0+300 -shorten 1 -wait -cpu -disk\" &"
 ])
	"tkined"		!"tkined &"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "locks"
{
	"Locks"			f.title
	"xlock"			!"xlock -mode flame &"
	"xlock remote"		!"xlock -remote -mode flame &"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "backgrounds"
{
	"Backgrounds"		f.title
	"xearth"		!"xearth -bigstars 10 -pos fixed,${LATITUDE:-0},${LONGITUDE:-0} -label -labelpos +1+1 -grid -wait 900 -nice 10 &"
	"xearth nogrid"		!"xearth -bigstars 10 -pos fixed,${LATITUDE:-0},${LONGITUDE:-0} -label -labelpos +1+1 -wait 900 -nice 10 &"
	"xearth orbiting"	!"xearth -bigstars 10 -pos orbit,0.1,0 -rot 10 -label -labelpos +1+1 -grid -wait 900 -nice 10 &"
	"xearth orbiting fast"	!"xearth -bigstars 10 -pos orbit,0.1,0 -rot 5 -label -labelpos +1+1 -grid -wait 0 &"
 ifelse(COLOR, Yes, [
	"xearth -gamma 1.7"	!"xearth -gamma 1.7 -bigstars 10 -pos fixed,${LATITUDE:-0},${LONGITUDE:-0} -label -labelpos +1+1 -grid -wait 900 -nice 10 &"
	"xearth -gamma 1.7 nogrid" !"xearth -gamma 1.7 -bigstars 10 -pos fixed,${LATITUDE:-0},${LONGITUDE:-0} -label -labelpos +1+1 -wait 900 -nice 10 &"
	"xearth -gamma 1.7 orbiting" !"xearth -gamma 1.7 -bigstars 10 -pos orbit,0.1,0 -rot 10 -label -labelpos +1+1 -grid -wait 900 -nice 10 &"
	"xearth -gamma 1.7 orbiting fast" !"xearth -gamma 1.7 -bigstars 10 -pos orbit,0.1,0 -rot 5 -label -labelpos +1+1 -grid -wait 0 &"
	"xearth on greyscale"	!"xearth -gamma 1.6 -night 15 -bigstars 10 -pos fixed,${LATITUDE:-0},${LONGITUDE:-0} -label -labelpos +1+1 -grid -wait 900 -nice 10 &"
 ], [
	"xearth on mono"	!"xearth -mono -night 15 -bigstars 10 -pos fixed,${LATITUDE:-0},${LONGITUDE:-0} -label -labelpos +1+1 -grid -wait 900 -nice 10 &"
 ])
	"xplanet"		!"xplanet  -label -labelpos +15-15 -radius 60 -latitude ${LATITUDE:-0} -longitude ${LONGITUDE:-0} -wait 300 &"
	"xphoon"		!"xphoon -t 10 &"
	"xsetroot eschernknot"	!"xsetroot -bitmap ${X11PATH}/[include]/X11/bitmaps/escherknot"
	"xsetroot xsnow"	!"xsetroot -bitmap ${X11PATH}/[include]/X11/bitmaps/xsnow"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "games"
{
	"X11 Games"		f.title
	"Abuse"			!"abuse &"
	"battleball"		!"battleball ${DISPLAY} &"
	"GalaXa"		!"galaxa &"
	"nighthawk"		!"nighthawk &"
	"Spider"		!"spider &"
	"xbat"			!"xbat &"
	"xbill"			!"xbill &"
	"xbomb"			!"xbomb &"
	"xbomber"		!"xbomber &"
	"xdemineur"		!"xdemineur &"
	"xevil"			!"xevil &"
	"xfreecell"		!"xfreecell &"
	"xgalaga"		!"xgalaga &"
	"xjig"			!"xjig &"
	"xkobo"			!"xkobo &"
 ifelse(eval(FontYDPI > 110), 1, [
	"xmahjongg"		!"xmahjongg -t real_x2 -g 2000x1500 --bg HOME/public_html/marble.gif &"
 ], [
	"xmahjongg"		!"xmahjongg &"
 ])
	"xmris"			!"xmris &"
	"xpat2"			!"xpat2 &"
	"xpilot"		!"xpilot &"
	"xpipeman"		!"xpipeman &"
	"xscrabble"		!"xscrabble &"
	"xsoldier"		!"xsoldier &"
	"xskat"			!"xskat &"
	"xworm"			!"xworm &"
	""			f.separator
	"X11 Sample Toys..."	f.menu "samplegames"
	""			f.separator
	"Pin this menu"		f.pin
}

menu "samplegames"
{
	"X11 Sample Toys & Demos"	f.title
	"Xeyes"			!"xeyes &"
	"Xgc"			!"xgc &"
	"Xgas"			!"xgas &" # xxx gone?
	"Xlogo"			!"xlogo &"
	"ico"			!"ico &"
	# ico(1): "Color allocation fails in TrueColor displays and option
	# -faces does not work well."
	"ico cube"		!"ico -sleep 0.02 -obj cube -faces -colors red &"
	"ico ico"		!"ico -sleep 0.02 -obj ico -faces -colors green &"
	"ico octa"		!"ico -sleep 0.02 -obj octa -faces -colors blue &"
	"ico pyramid"		!"ico -sleep 0.02 -obj pyramid -faces -colors yellow &"
	"ico plane"		!"ico -sleep 0.02 -obj pyramid -faces -colors purple &"
	"maze"			!"maze &" # xxx gone ?
	"puzzle"		!"puzzle &" # xxx gone?
	""			f.separator
	"Pin this menu"		f.pin
}

menu "xterms"
{
	"Xterms Everywhere"	f.title
	"UXterm @CLIENTHOST"	!"eval uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} ${XTERM_LOGIN_OPTS} &"
	"UXterm-big @CLIENTHOST" !"eval uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS} ${XTERM_LOGIN_OPTS} &"
 ifdef([AT_LOCAL], [
# xxx this should use a macro!
	"UXterm @xenful"	!"set -i; . ./.shrc; onx11server -n -X xenful.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @xenful"	!"set -i; . ./.shrc; onx11server -n -X xenful.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @xentastic"	!"set -i; . ./.shrc; onx11server -n -X xentastic.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @xentastic"	!"set -i; . ./.shrc; onx11server -n -X xentastic.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	#
#	"UXterm @building"	!"set -i; . ./.shrc; onx11server -n -X building.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm-big @building"	!"set -i; . ./.shrc; onx11server -n -X building.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @more"		!"set -i; . ./.shrc; onx11server -n -X more.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @more"	!"set -i; . ./.shrc; onx11server -n -X more.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm @future"	!"set -i; . ./.shrc; onx11server -n -X future.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm-big @future"	!"set -i; . ./.shrc; onx11server -n -X future.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm @isit"		!"set -i; . ./.shrc; onx11server -n -X isit.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm-big @isit"	!"set -i; . ./.shrc; onx11server -n -X isit.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm @lilbit"	!"set -i; . ./.shrc; onx11server -n -X lilbit.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm-big @lilbit"	!"set -i; . ./.shrc; onx11server -n -X lilbit.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm @rpi"		!"set -i; . ./.shrc; onx11server -n -X rpi.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm-big @rpi"	!"set -i; . ./.shrc; onx11server -n -X rpi.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm @historically"	!"set -i; . ./.shrc; onx11server -n -X historically.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
#	"UXterm-big @historically" !"set -i; . ./.shrc; onx11server -n -X historically.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @once"		!"set -i; . ./.shrc; onx11server -n -X once.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @once"	!"set -i; . ./.shrc; onx11server -n -X once.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @fezzik"	!"set -i; . ./.shrc; onx11server -fS -X fezzik.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @fezzik"	!"set -i; . ./.shrc; onx11server -fS -X fezzik.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @nb10"		!"set -i; . ./.shrc; onx11server -n -X nb10.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @nb10"	!"set -i; . ./.shrc; onx11server -n -X nb10.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @nbday"		!"set -i; . ./.shrc; onx11server -fS -X nbday.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @nbday"	!"set -i; . ./.shrc; onx11server -fS -X nbday.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @nbt"		!"set -i; . ./.shrc; onx11server -n -X nbt.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @nbt"	!"set -i; . ./.shrc; onx11server -n -X nbt.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @nbt2"		!"set -i; . ./.shrc; onx11server -n -X nbt2.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @nbt2"	!"set -i; . ./.shrc; onx11server -n -X nbt2.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @nbtest"	!"set -i; . ./.shrc; onx11server -n -X nbtest.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @nbtest"	!"set -i; . ./.shrc; onx11server -n -X nbtest.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @nbtcur"	!"set -i; . ./.shrc; onx11server -n -X nbtcur.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @nbtcur"	!"set -i; . ./.shrc; onx11server -n -X nbtcur.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	"UXterm @very-old"	!"set -i; . ./.shrc; onx11server -fS -X very-old.local \"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS}\" &"
	"UXterm-big @very-old"	!"set -i; . ./.shrc; onx11server -fS -X very-old.local \"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS}\" &"
	#
	# xxx these are not so useful as if the SSH connection drops then the
	# window simply disappears with no hint as to when or why!  See further
	# discussion in ~/.xinitrc regarding running X11 via tunnels, etc.
	#
	"Slogin @xentral"	!"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} -e 'slogin -CY xentral.avoncote.ca' &"
	"Slogin-big @xentral"	!"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS} -e 'slogin -CY xentral.avoncote.ca' &"
	"Slogin @central"	!"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} -e 'slogin -CY central.weird.com' &"
	"Slogin-big @central"	!"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS} -e 'slogin -CY central.weird.com' &"
	"Slogin @b2"		!"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} -e 'slogin -CY b2.avoncote.ca' &"
	"Slogin-big @b2"	!"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS} -e 'slogin -CY b2.avoncote.ca' &"
  ifdef([AT_VERY_LOCAL], [
	# xxx until MDNS is integrated in nsdispatch(3) in NetBSD, only macos can find dynamic names....
	"Slogin @westley-tng"	!"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} -e 'slogin -CY westley-tng.local' &"
	"Slogin-big @westley-tng" !"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS} -e 'slogin -CY westley-tng.local' &"
	"Slogin @wayback"	!"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} -e 'slogin -CY wayback.local' &"
	"Slogin-big @wayback"	!"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS} -e 'slogin -CY wayback.local' &"
  ], [
	"Slogin @very"		!"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} -e 'slogin -CY very.local' &"
	"Slogin-big @very"	!"uxterm ${XTERM_BIG_OPTS} ${XTERM_OPTS} -e 'slogin -CY very.local' &"
  ])
 ])
 ifdef([AT_WEIRD], [
  ifelse(HOSTNAME, [most.weird.com], [], [
	"Xterm @most"		!"set -i; . ./.shrc; onx11server -n -X most.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
  ifelse(HOSTNAME, [historically.weird.com], [], [
	"Xterm @historically"	!"set -i; . ./.shrc; onx11server -n -X historically.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
  ifelse(HOSTNAME, [building.weird.com], [], [
	"Xterm @building" 	!"set -i; . ./.shrc; onx11server -n -X building.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
  ifelse(HOSTNAME, [once.weird.com], [], [
	"Xterm @once"		!"set -i; . ./.shrc; onx11server -n -X once.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
  ifelse(HOSTNAME, [very.weird.com], [], [
	"Xterm @very"		!"set -i; . ./.shrc; onx11server -n -X very.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
  ifelse(HOSTNAME, [almost.weird.com], [], [
	"Xterm @almost"		!"set -i; . ./.shrc; onx11server -n -X almost.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
  ifelse(HOSTNAME, [whats.weird.com], [], [
	"Xterm @whats"		!"set -i; . ./.shrc; onx11server -n -X whats.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
  ifelse(HOSTNAME, [sometimes.weird.com], [], [
	"Xterm @sometimes" 	!"set -i; . ./.shrc; onx11server -n -X sometimes.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
  ifelse(HOSTNAME, [always.weird.com], [], [
	"Xterm @always" 	!"set -i; . ./.shrc; onx11server -n -X always.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
  ifelse(HOSTNAME, [freely.weird.com], [], [
	"Xterm @freely" 	!"set -i; . ./.shrc; onx11server -n -X freely.weird.com \"xterm ${XTERM_OPTS}\" &"
  ])
 ])
	""			f.separator
	"Pin this menu"		f.pin
}

# for pushing our X11 AUTH cookies over to the various target hosts in case they
# don't share $HOME with the local host...
#
#	xauth nextract - ${REMOTE_DISPLAY} | rsh $X11SERVER $X11BIN/xauth nmerge -
#
# XXX N.B.:  note use a filter to get only address-family "0" i.e. IPv4
# addresses since we don't use IPv6 and loading IPv6 addresses in the remote
# host may confuse it should it have code that supports IPv6 but it is not
# configured properly to use IPv6 on the network....
#
#	xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | rsh $X11SERVER $X11BIN/xauth nmerge -
#
ifdef([AT_WEIRD], [
menu "xauths"
{
	"Xauth pushes to Weird.com"	f.title
 ifdef([X11SERVER], [
	"Xauth to X11SERVER"	!"xauth nextract - ${REMOTE_DISPLAY} | (set -i; . ./.shrc; onx11server -X X11SERVER 'xauth nmerge -' ) &"
 ])
	"Xauth to most"		!"xauth nextract - ${REMOTE_DISPLAY} | ${RSH} most.weird.com /usr/X11R6/bin/xauth nmerge - &"
	"Xauth to isit"		!"xauth nextract - ${REMOTE_DISPLAY} | ${RSH} isit.weird.com /usr/X11R6/bin/xauth nmerge - &"
	"Xauth to once"		!"xauth nextract - ${REMOTE_DISPLAY} | ${RSH} once.weird.com /usr/X11R6/bin/xauth nmerge - &"
	"Xauth to historically"	!"xauth nextract - ${REMOTE_DISPLAY} | ${RSH} historically.weird.com /usr/X11R6/bin/xauth nmerge - &"
	"Xauth to freely"	!"xauth nextract - ${REMOTE_DISPLAY} | ${RSH} freely.weird.com /usr/X11R6/bin/xauth nmerge - &"
	"Xauth to whats"	!"xauth nextract - ${REMOTE_DISPLAY} | ${RSH} whats.weird.com /usr/X11R6/bin/xauth nmerge - &"
	""			f.separator
	"Pin this menu"		f.pin
}
])

ifdef([AT_LOCAL], [
menu "xauths"
{
	"Xauth pushes"		f.title
	"Xauth to more"		!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X more.local 'xauth nmerge -' ) &"
	"Xauth to xenful"	!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X xenful.local 'xauth nmerge -' ) &"
	"Xauth to xentastic"	!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X xentastic.local 'xauth nmerge -' ) &"
	"Xauth to nb10"		!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X nb10.local 'xauth nmerge -' ) &"
	"Xauth to nbday"	!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -S -X nbday.local 'xauth nmerge -' ) &"
	"Xauth to nbt"		!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X nbt.local 'xauth nmerge -' ) &"
	"Xauth to nbt2"		!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X nbt2.local 'xauth nmerge -' ) &"
	"Xauth to nbtest"	!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X nbtest.local 'xauth nmerge -' ) &"
	"Xauth to nbtcur"	!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X nbtcur.local 'xauth nmerge -' ) &"
	"Xauth to fezzik"	!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -S -X fezzik.local 'xauth nmerge -' ) &"
	"Xauth to frodo"	!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -S -X frodo.local 'xauth nmerge -' ) &"
	"Xauth to historically"	!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X historically.local 'xauth nmerge -' ) &"
	"Xauth to once"		!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -X once.local 'xauth nmerge -' ) &"
	"Xauth to very-old"	!"xauth nextract - ${REMOTE_DISPLAY} | awk '$1 == 0 {print}' | (set -i; . ./.shrc; onx11server -S -X very-old.local 'xauth nmerge -' ) &"
	""			f.separator
	"Pin this menu"		f.pin
}
])

ifdef([ON_OSX], [
menu "osx-apps"
{
	"Mac OS X Applications"	f.title
	# xxx maybe not all XTERM_OPTS are needed, but will they hurt?
	"pasteboard copy"	!"uxterm ${XTERM_LITTLE_OPTS} ${XTERM_OPTS} -T 'Paste text to PasteBoard here, end with EOF' -e pbcopy"
	""			f.separator
	"Activity Monitor"	!"open '/Applications/Utilities/Activity Monitor.app' &"
	"Console"		!"open /Applications/Utilities/Console.app &"
	"Vivaldi"		!"open '/Applications/Vivaldi.app' &"
	"Safari"		!"open '/Applications/Safari.app' &"
	"Google Chrome"		!"open '/Applications/Google Chrome.app' &"
	"Calendar"		!"open /Applications/Calendar.app &"
	"Photos"		!"open /Applications/Photos.app &"
	"Podcasts"		!"open /Applications/Podcasts.app &"
	"Music"			!"open /Applications/Music.app &"
	"Mail"			!"open /Applications/Mail.app &"
	"Preview"		!"open /Applications/Preview.app &"
	"Signal"		!"open /Applications/Signal.app &"
	"System Preferences"	!"open '/Applications/Utilities/System Preferences.app' &"
	"System Profiler"	!"open '/Applications/Utilities/System Profiler.app' &"
	"Terminal"		!"open /Applications/Utilities/Terminal.app &"
	""			f.separator
	"Pin this menu"		f.pin
}
])

# Local Variables:
# comment-start: "# "
# conf-space-keywords: "\\(ifdef\\|ifelse\\|define\\|changequote\\|esyscmd\\|eval\\)"
# End:
