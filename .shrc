#
#	.shrc - per-shell startup stuff for /bin/sh
#
#ident	"@(#)HOME:.shrc	20.1	98/07/20 11:23:47 (woods)"

PATH="$PATH"
export PATH

dirappend ()
{
	if [ $# -le 1 ] ; then
		echo "Usage: dirappend variable directory [...]" >&2
		exit 2
	fi
	varname=$1
	shift
	eval varvalue='$'$varname
	while [ $# -gt 0 ] ; do
		if [ -d "$1" -a `expr ":$varvalue:" : ".*:$1:.*"` -eq 0 ] ; then
			eval $varname='$'"$varname"'":$1"'
		fi
		shift
	done
	unset varname varvalue
}

dirprepend ()
{
	if [ $# -le 1 ] ; then
		echo "Usage: dirprepend variable directory [...]" >&2
		exit 2
	fi
	varname=$1
	shift
	eval varvalue='$'$varname
	while [ $# -gt 0 ] ; do
		if [ -d "$1" -a `expr ":$varvalue:" : ".*:$1:.*"` -eq 0 ] ; then
			eval $varname='"$1:"$'"$varname"
		fi
		shift
	done
	unset varname varvalue
}

# UGLY, but it works
#
# WARNING: this sed expression breaks if there isn't a group-id for each gid
#
eval "`id|sed -e 's/^uid=\([0-9]*\)(\(..*\)) gid=[0-9]*(\([^) ]*\)).*$/id=\1 uid=\2 gid=\3/'`"

if [ "$id" -eq 0 ] ; then
	# got to get rid of lone ":" or any "." in PATH
	PATH="`echo $PATH | sed -e 's/::/:/g' -e 's/^://' -e 's/:$//' -e 's/^\.://' -e 's/:\.://' -e 's/:\.$//'`"
	if $ISSUN; then
		PATH="`echo $PATH | sed -e 's~^/bin:~~' -e 's~:/etc:~:~'`"
		dirprepend PATH /usr/5bin
		dirappend PATH /usr/openwin/bin
	else
		dirprepend PATH /etc
	fi
	dirprepend PATH /sbin /usr/sbin
	dirappend PATH /usr/etc /usr/lbin /usr/ucb $X11BIN
	if [ -n "$LOCAL" ] ; then
		dirappend PATH $LOCAL/sbin $LOCAL/bin
		if [ ! -d $LOCAL/sbin ] ; then
			dirappend PATH $LOCAL/etc
		fi
	fi
	if [ -n "$GNU" ] ; then
		dirappend PATH $GNU/sbin $GNU/bin
		if [ ! -d $GNU/sbin ] ; then
			dirappend PATH $GNU/etc
		fi
	fi
	if [ -n "$CONTRIB" ] ; then
		dirappend PATH $CONTRIB/sbin $CONTRIB/bin
		if [ ! -d $CONTRIB/sbin ] ; then
			dirappend PATH $CONTRIB/etc
		fi
	fi
	if [ -n "$PKG" ] ; then
		dirappend PATH $PKG/sbin $PKG/bin
		if [ ! -d $PKG/sbin ] ; then
			dirappend PATH $PKG/etc
		fi
	fi
	dirappend PATH /usr/lib/uucp /usr/lib
	dirappend PATH $HOME/bin
	PS1="$TTYN:<$LOGNAME@$UUNAME> # "
elif [ "$uid" != "$LOGNAME" ] ; then
	PS1="$TTYN:<$uid($LOGNAME)@$UUNAME)> $ "
else
	PS1="$TTYN:<$LOGNAME@$UUNAME> $ "
fi
if type ismpx 2>&1 >/dev/null ; then
	: might just be running layers
else
	# otherwise it's just not possible....
	ismpx ()
	{
		false
	}
fi

if [ "$(ismpx)" = yes -o "$TERM" = "dmd-myx" ] ; then
	if [ "$LEV" -eq 0 ] ; then
		do_first_time	# in xterms, we are a login shell, but not in layers
	fi
	MYXCLR_L="$(myxban -l)"
	MYXCLR_C="$(myxban -c)"
	MYXCLR_R="$(myxban -r)"
	MYXCLR="${MYXCLR_L}${MYXCLR_C}${MYXCLR_R}"
	MYXBAN_L='`pwd`'

	alias clearban='print "${MYXCLR}\c"'

	setban ()
	{
		clearban
		eval myxban -l "\"$MYXBAN_L\""
		myxban -c "${WBANNER}"
		eval myxban -r "\"$MYXBAN_R\""
	}

# most versions of SysV sh always run builtins before functions
#
#	cd ()
#	{
#		chdir $*
#		eval myxban -l "\"$MYXBAN_L\""
#	}

	setban
fi

if [ "$TERM" = "xterm" ] ; then
	clearban ()
	{
		WBANNER=""
		setban
	}

	setban ()
	{
		BANNERWD=`pwd | sed -e "s;^$HOME;~;" -e 's;^.*/work.d/;work.d/;' -e 's;.*/home.*/\([^/][^/]*\)$;\~\1;'`
		eval TBANNER='"${WBANNER:-sh}://$UUNAME/${BANNERWD} | $uid{$gid}($LOGNAME)[$LEV]:$TTYN"'
		echo "]0;$TBANNER\c"
		WBANNER=""
	}

# most versions of SysV sh always run builtins before functions
#
#	cd ()
#	{
#		chdir $*
#		BANNERWD=`pwd | sed -e "s;^$HOME;~;" -e 's;^.*/work.d/;work.d/;' -e 's;.*/home.*/\([^/][^/]*\)$;\~\1;'`
#		setban 
#	}

	setban
fi

if $ISSUN; then
	df ()
	{
		/usr/bin/df $*
	}
fi
if [ -d /var/spool/uucp ] ; then
	uufollow ()
	{
		xtail /var/spool/uucp/.[AL]*/*
	}
else
	uufollow ()
	{
		xtail /usr/spool/uucp/.[AL]*/*
	}
fi

if [ -x /usr/ucb/rsh -a -x /bin/rsh ] ; then
	rsh ()
	{
		/usr/ucb/rsh $*
	}
fi

if [ -r $HOME/.shsccs ] ; then
	. $HOME/.shsccs
fi

errno ()
{
	grep "^#define[ 	]*[A-Z][A-Z]*[ 	]*$1[ 	]" /usr/include/sys/errno.h
}

lastcmd ()
{
	tr '[\001-\007]' '[\012*]' < .sh_history | \
		tr '[\176-\377]' '[ *]' | \
		egrep -v '^[	 }#]|^$' | \
		tail ${1+"$@"}
}

malias ()
{
	grep "alias[ 	]$*" $LOCAL/lib/mush/Mail.rc ~/.mushrc
}

signm ()
{
	grep "^#define[ 	]*SIG.*[ 	]*${1}[ 	]" /usr/include/sys/signal.h
}

signo ()
{
	grep -i "^#define[ 	]*.*${1}[ 	]*[0-9]" /usr/include/sys/signal.h
}

typeof ()
{
	if $ISSUN; then
		LLIBDIR=/usr/lib/lint
	else
		LLIBDIR=/usr/lib
	fi
	# should expand to allow '-l{lib}'
	egrep -i "$1" $LLIBDIR/llib-lc $LLIBDIR/llib-lm $LLIBDIR/llib-lcurses
	unset LLIBDIR
}

blstrip ()
{
	sed "/./,/^$/!d"
}
ds ()
{
	$PAGER $*
}
e ()
{
	${VISUAL:-$EDITOR} $*
}
elc ()
{
	emacs -batch -q -no-site-file -f batch-byte-compile
}
l ()
{
	/bin/ls -CF $*
}
la ()
{
	/bin/ls -CFa $*
}
ll ()
{
	/bin/ls -lis $*
}
lla ()
{
	/bin/ls -lisa $*
}
llr ()
{
	/bin/ls -lisR $*
}
llra ()
{
	/bin/ls -lisaR $*
}
lr ()
{
	/bin/ls -CFR $*
}
lra ()
{
	/bin/ls -CFRa $*
}
lsa ()
{
	/bin/ls -a $*
}
nstty ()
{
	stty sane intr "^?" erase "^h" kill "^u" echoe echok
}
maillog ()
{
	$PAGER -e +G $MAILLOG
}
rstty ()
{
	stty $SANE
}
wcvs ()
{
	print $CVSROOT
}
