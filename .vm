;;;;
;;;;	.vm.el - startup initialisation for ViewMail
;;;;
;;;#ident	"@(#)HOME:.vm	19.1	98/01/11 20:58:35 (woods)"
;;;
;;; per-user start-up functions for GNU-emacs VM package (View-Mail)
;;;

(require 'sendmail)			; get this over with right away

(add-hook 'mail-setup-hook 'mail-abbrevs-setup)
(add-hook
 'mail-setup-hook
 '(lambda ()
    ;; it would be nice to have mail-abbrev-next-header and maybe
    ;; mail-abbrev-goto-mail-text and mail-abbrev-comma too....
    ;; mail-abbrev-end-of-buffer is useless with signature files.
    (substitute-key-definition 'next-line 'mail-abbrev-next-line
                               mail-mode-map global-map)))

;;; rmime.el --- read MIME messages
;; Author: Ray Moody <moody@cray.com>
;; Version: $Id: rmime.el,v 1.2 1996/05/30 02:24:58 moody Exp $
;; NOTE: elisp-file-in-loadpath-p comes from my .emacs.el
(if (elisp-file-in-loadpath-p "rmime")
    (progn
      ;; automatic rmime-mode for all messages...
      ;;(setq vm-preview-lines t)
      ;;(add-hook 'vm-select-message-hook 'rmime-format)
      ;; or you can use the key bindings to show MIME...
      (setq vm-preview-lines 4)
      (add-hook 'vm-select-message-hook 'rmime-cancel)
      ;; this you want in any case...
      (add-hook 'vm-edit-message-hook 'rmime-cancel)
      (autoload 'rmime-mode "rmime" "Toggle rmime-mode." nil)
      (autoload 'rmime-format "rmime" "Turn on rmime-mode and format current buffer." nil)
      (autoload 'rmime-cancel "rmime" "Turn off rmime-mode and revert current buffer." nil)
      (autoload 'vm-rmime-mode "rmime" "Toggle rmime-mode for current message." nil)
      (setq rmime-clean-files t)	; save as MIME encoded
      (define-key vm-mode-map "I" 'vm-rmime-mode))
  (setq vm-preview-lines 4))		; allow 4 lines of the body to show

;;;
;;; some more enhancements
;;; borrowed from gnuspost.el
;;;
(defvar vm-local-domain-name nil
  "*Local domain name for mail purposes.")

(if (not (fboundp 'vm-fqdn))
    (defun vm-fqdn (&optional genericfrom)
      "Return user's fully qualified domain name.
If optional argument GENERICFROM is a string, use it as the domain
name; if it is non-nil, strip of local host name from the domain name.
If the function `system-name' returns full internet name and the
domain is undefined, the domain name is got from it."
      (let ((domain (or (if (stringp genericfrom) genericfrom)
			(getenv "DOMAINNAME")
			vm-local-domain-name
			;; Function `system-name' may return full internet name.
			;; Suggested by Mike DeCorte <mrd@sun.soe.clarkson.edu>.
			(if (string-match "\\." (system-name))
			    (substring (system-name) (match-end 0)))
			(read-string "Domain name (no host): ")))
	    (host (or (if (string-match "\\." (system-name))
			  (substring (system-name) 0 (match-beginning 0)))
		      (system-name))))
	(if (string-equal "." (substring domain 0 1))
	    (setq domain (substring domain 1)))
	(if (null vm-local-domain-name)
	    (setq vm-local-domain-name domain))
	;; Support GENERICFROM as same as standard Bnews system.
	;; Suggested by ohm@kaba.junet and vixie@decwrl.dec.com.
	(cond ((null genericfrom)
	       (concat host "." domain))
	      (t domain)))))

(if (not (fboundp 'vm-generate-message-id))
    (defun vm-generate-message-id ()
      "Generate unique Message-Id value for user."
      (concat "<" (vm-unique-id) "@" (vm-fqdn) ">")))

(if (not (fboundp 'vm-unique-id))
    (defun vm-unique-id ()
      "Generate unique ID from user name and current time."
      (let ((date (current-time-string))
	    (name (user-login-name)))
	(if (string-match "^[^ ]+ \\([^ ]+\\)[ ]+\\([0-9]+\\) \\([0-9]+\\):\\([0-9]+\\):\\([0-9]+\\) [0-9][0-9]\\([0-9][0-9]\\)"
			  date)
	    (concat (upcase name) "."
		    (substring date (match-beginning 6) (match-end 6)) ;Year
		    (substring date (match-beginning 1) (match-end 1)) ;Month
		    (substring date (match-beginning 2) (match-end 2)) ;Day
		    (substring date (match-beginning 3) (match-end 3)) ;Hour
		    (substring date (match-beginning 4) (match-end 4)) ;Minute
		    (substring date (match-beginning 5) (match-end 5)) ;Second
		    )
	  (error "Cannot understand current-time-string: %s." date)))))

;;;From: friedman@splode.com (Noah Friedman)
;;;In-Reply-To: <srandall@quixote.asic.sc.ti.com> , 13 May 1997 10:32:32 -0500
;;;References: <wq9d8qvie0f.fsf@quixote.i-have-a-misconfigured-system-so-shoot-me>
;;;Message-Id: <19970514015519.FMU96188@piglet.splode.com>
;;;To: srandall@quixote.asic.sc.ti.com
;;;Cc: info-vm@uunet.uu.net
;;;Date: Wed, 14 May 1997 01:55:19 -0700 (PDT)
;;;Subject: please help me fix minor annoyances in vm

(define-key mail-mode-map "\C-i" 'mail-goto-next-header-or-insert)

(define-key mail-mode-map [S-tab] 'mail-goto-previous-header)

(defun mail-goto-previous-header (&optional count)
  "Call mail-goto-next-header-or-insert with (- COUNT)"
  (interactive "p")
  (mail-goto-next-header-or-insert (- count)))

(defun mail-goto-next-header-or-insert (&optional count)
  "If in header area, go to beginning of next header.
If point is not in the header area, just insert the character which
invoked this command.

With numeric prefix arg, skip forward that many headers.
If prefix arg is negative, skip backward that many headers.

If either the head or tail of the headers are reached, wrap around
to the other end and continue."
  (interactive "p")
  (let* ((headers-end
	  (save-excursion
	    (goto-char (point-min))
	    (re-search-forward
	     (concat "^" (regexp-quote mail-header-separator) "$"))
	    (match-beginning 0)))
	 (forwardp (or (null count) (> count 0)))
	 (fn (if forwardp 're-search-forward 're-search-backward))
	 (la (if forwardp 2 1))
	 (nla (if forwardp 1 2))
	 (re "^[^:\n\t ]+:")
	 (i (abs count)))
    (cond ((>= (point) headers-end)
	   (call-interactively 'self-insert-command))
	  (t
	   (save-restriction
	     (narrow-to-region (point-min) headers-end)
	     (while (not (zerop i))
	       (cond
		((funcall fn re nil t (if (looking-at re) la nla)))
		(t
		 (goto-char (point-min))
		 (funcall fn re nil t)))
	       (setq i (1- i)))
	     (goto-char (match-end 0))
	     (and (looking-at "[ \t]")
		  (forward-char 1)))))))

;;;
;;;	some stuff for sendmail.el ...
;;;

(setq mail-signature t)			; auto-insert ~/.signature
(setq mail-default-reply-to (concat (user-login-name) "@" (vm-fqdn t)
				    " (" (user-full-name) ")"))
(setq mail-header-separator ".")	; as close to nothing as possible

(add-hook 'vm-mail-mode-hook
	  (function (lambda () (local-set-key "\C-ci" 'ispell-message))))

;;(setq mail-archive-file-name "~/Mail/.outgoing") ; for posterity
;;
;;; From: bhoylma@advtech.USWest.COM (Bruce W. Hoylman)
;;; SENDER: info-vm-request@uunet.uu.net
;;; Subject: Re: Newbie wants VM to auto-archive mail like (shudder) pine
;;; Date: 30 May 1995 10:57:11 -0600
(add-hook 'vm-mail-mode-hook
	  ;; Mail archive filename defun
	  (defun set-mail-archive-file-name ()
	    (let ((date (current-time-string)))
	      (string-match
	       "^\\([A-Z][a-z][a-z]\\) \\([A-Z][a-z][a-z]\\) \\([0-9 ][0-9]\\) \\([0-9][0-9]:[0-9][0-9]\\)\\(:[0-9][0-9]\\) [0-9][0-9]\\([0-9][0-9]\\)"
	       date)
	      (setq mail-archive-file-name
		    (concat vm-folder-directory
			    ".outgoing/"
			    (substring date (match-beginning 6)
				       (match-end 6))
			    "-"
			    (substring date (match-beginning 2)
				       (match-end 2)))))))

(defvar mail-default-organization "~/.organization"
  "The default name of your organization (or filename containing a string
defining the organization name), if not set in the environment variable
ORGANIZATION.  If not nil, takes precedence over the file
{$LOCAL,/usr}/lib/news/organization.")

(setq mail-default-headers
      (concat
       (concat "X-Mailer: ViewMail (vm) Version "
	       (vm-version)
	       "\n\twith "
	       (emacs-version)
	       "\n")
       (concat "Organization: "
	       (let* ((org-list (list (getenv "ORGANIZATION")
				      mail-default-organization
				      (concat (or (getenv "LOCAL")
						  "/usr/")
					      "lib/news/organization")))
		      (org nil))
		 (while (and (not org)
			     (cdr org-list))
		   (let ((org-file (car org-list)))
		     (setq org-list (cdr org-list))
		     (cond ((not org-file)
			    (setq org nil))
			   ((file-name-absolute-p org-file)
			    (setq org-file (expand-file-name org-file "/"))
			    (if (file-exists-p org-file)
				(let ((org-buffer (generate-new-buffer
						   (generate-new-buffer-name
						    "orgbuf"))))
				  (save-excursion
				    (set-buffer org-buffer)
				    (insert-file-contents org-file)
				    (goto-char (point-max))
				    (let ((fill-prefix "\t")
					  (fill-column 72))
				      (fill-region (point-min) (point-max)))
				    (let ((end-pt (point)))
				      (skip-chars-backward "\ \t\n")
				      (delete-region (point) end-pt))
				    (setq org (buffer-string))
				    (not-modified)
				    (kill-buffer nil)))))
			   (t
			    (setq org org-file)))))
		 org)
	       "\n")))			; mail-mode needs the trailing newline,
					; VM will cope either way

;;;
;;;	VM related things
;;;
(defun my-vm-auto-archive-messages ()
  (interactive)
  (if (y-or-n-p "Are you sure you want to archive all messages???")
      (vm-auto-archive-messages)))

(define-key vm-mode-map "A" 'my-vm-auto-archive-messages)

(defun my-vm-quit ()
  (interactive)
  (if (y-or-n-p "Are you sure you want to quit?")
      (vm-quit)))

(define-key vm-mode-map "q" 'my-vm-quit)

;;; Message-ID: <4vnura$cgr@nnrp1.news.primenet.com>
;;; From: edwinh@primenet.com (Edwin Huffstutler)
;;; Date: 24 Aug 1996 15:14:02 -0700
;;; Subject: Remove "extra" text from replies
;;; Summary: functions to remove .sigs, double citations
;;; 
;;; Create a function to nuke a .sig from replied-to mail (if it exists).  
;;; Find the end of the buffer, back up over my .sig, then delete up to 
;;; the beginning of the quoted .sig. 
(defun citation-kill-sig ()
  "Nuke a .sig from cited mail"
  (interactive)
  (save-excursion
    (goto-char (point-max))
    (search-backward-regexp "^-- ?$" 1 t) 
    (let ((top-of-my-sig (point)))
      (search-backward-regexp 
       (concat "^" vm-included-text-prefix "-- ?$") 1 t)
      (delete-region (point) top-of-my-sig)
      )))

;;; more from: edwinh@primenet.com (Edwin Huffstutler)
;;; 
;;; This next one I bind to C-c C-d in a reply buffer, and it deletes anything
;;; that has been quoted twice, and removes included-text-prefixes on blank
;;; lines.  (I just think it looks cleaner that way, as I usually reply to
;;; each paragraph of the mail separately)
;;; 
;;; define a function to remove doubly-cited stuff
(defun citation-kill-double ()
  "Remove doubly-cited text and extra lines in a mail message"
  (interactive)
  (save-excursion
    ;;; nuke the quoted quoted text
    ;;(beginning-of-buffer)
    ;;(replace-regexp
    ;; (concat "^" vm-included-text-prefix "\\sw*[>|}].*\n") "")
    ;;; get rid of citation prefix on blank lines
    (beginning-of-buffer)
    (replace-regexp
     (concat "^" vm-included-text-prefix "$") "")
    ;;; replace more than two newlines with just two
    (beginning-of-buffer)
    (replace-regexp "\n\n+" "\n\n")
    ;;; get rid of double attribution text
    ;;(beginning-of-buffer)
    ;;(replace-regexp
    ;; (concat "^" vm-included-text-prefix "\\[ .*wrote.*\\]\n\\|"
    ;;         "^" vm-included-text-prefix ".*wrote:\n") "")
    ))

(add-hook 'vm-reply-hook
	  '(lambda ()
	     (local-set-key "\C-c\C-s" 'citation-kill-sig)
	     (local-set-key "\C-c\C-d" 'citation-kill-double)))

;; commented lines indicate changed values....  (from v5.72)
;;
(setq 
;;;   vm-arrived-message-hook nil
;;;   vm-arrived-messages-hook nil
      vm-auto-center-summary nil
      vm-auto-folder-alist '(
			     ;; To: & Cc: entries here.
			     ("^\\(to\\|cc\\|resent-to\\|apparently-to\\)"
			      ("8lgm-advisories@8lgm.org" . "8lgm-l")
			      ("admin-l@io.org" . "planix/io-admin-l")
			      ("aegis-users@" . "aegis-users-l")
			      ("auto-net@" . "auto-net-l")
			      ("automake@" . "automake-l")
			      ("best-of-security@suburbia.net" . "best-of-security-l")
			      ("bind@" . "bind-l")
			      ("bind-users@" . "bind-users-l")
			      ("bind-workers@" . "bind-workers-l")
			      ("com-priv@.*psi.com" . "com-priv-l")
			      ("devel-cvs@" . "devel-cvs-l")
			      ("djb-qmailbeta@" . "djb-qmailbeta-l")
			      ("djb-qmail@" . "djb-qmail-l")
			      ("domain-policy@" . "domain-policy-l")
			      ("exim-users@" . "exim-users-l")
			      ("freenrg-l@" . "freenrg-l")
			      ("\\(hyperbole\\|hyperbole-announce\\)@" . "hyperbole-l")
			      ("iap@" . "iap-l")
			      ("info-vm@" . "bug-vm") ; just merge these....
			      ("ipfilter@" . "ipfilter-l")
			      ("ip-registry@" . "ip-registry-l")
			      ("isp-telco@" . "isp-telco-l")
			      ("jet-fuel@" . "jet-fuel-l")
			      ("lout@" . "lout-l")
			      ("NAMEDROPPERS@LISTS.INTERNIC.NET" . "namedroppers-l")
			      ("namedroppers@internic.net" . "namedroppers-l")
			      ("net-dist@nikhef.nl" . "nikhef.net-dist-l")
			      ("newdom@iiia.org" . "newdom-l")
			      ("pcl-cvs@" . "pcl-cvs-l")
			      ("pcl-cvs-auto-bugs@" . "pcl-cvs-l")
			      ("prcs-list@" . "prcs-l")
			      ("qotd@" . "qotd-l")
			      ("rc@hawkwind.utcs.toronto.edu" . "rc-l")
			      ("rs-info@" . "rs-info-l")
			      ("shared-tld@" . "shared-tld-l")
			      ("smail3-bugs-fwd@" . "smail3-bugs-fwd-l")
			      ("smail3-devel@" . "smail3-devel-l")
			      ("smail3-maintainers@" . "smail3-maintainers-l")
			      ("smail3-users@" . "smail3-users-l")
			      ("smail3-wizards@" . "smail3-wizards-l")
			      ("ssh@" . "ssh-l")
			      ("stk@" . "stk-l")
			      ("tkined@" . "tkined-l")
			      ("trn-test@" . "trn-test-l")
			      ("zmailer@" . "zmailer-l")
			      ;; various netbsd lists
			      ("source-changes@NetBSD.ORG" . "netbsd/source-changes")
			      ("\\(current-users@NetBSD.ORG\\|apana-lists-os-netbsd-general@\\|source@NetBSD.ORG\\)" .
			       "netbsd/current-users")
			      ("\\(tech-[^@%]+\\)[@%]NetBSD.ORG" .
			       (concat "netbsd/"
				       (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ("\\(netbsd-[^@%]+\\)[@%]" .
			       (concat "netbsd/"
				       (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ;; various other <type>-<subj>@ lists....
			      ("\\(bug-[^@%]+\\)[@%]" .
			       (concat (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ("\\(gnu-[^@%]+\\)[@%]" .
			       (concat (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ("\\(info-[^@%]+\\)[@%]" .
			       (concat (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      )
			     ;; Reply-to: entries here.
			     ("^reply-to"
			      ("Suns-at-Home@" . "suns-at-home-l")
			      )
			     ;; Sender: entries here.
			     ("^\\(sender\\|resent-sender\\)"
			      ("ciac-bulletin@" . "ciac-l")
			      ("ciac-notes@" . "ciac-l")
			      ("iap@vma.cc.nd.edu" . "iap-l")
			      ("owner-admin-l@io.org" . "planix/io-admin-l")
			      ("owner-devel-cvs@" . "devel-cvs-l")
			      ("owner-fwtk-users@" . "fwtk-l")
			      ("owner-namedroppers@internic.net" . "namedroppers-l")
			      ("owner-net-dist@nikhef.nl" . "nikhef.net-dist-l")
			      ("owner-pcl-cvs@" . "pcl-cvs-l")
			      ("owner-rs-info@internic.net" . "rs-info-l")
			      ("owner-\\([^@%]+\\)[@%]NetBSD.ORG" .
			       (concat "netbsd/"
				       (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      )
			     ;; From: entries here.
			     ("^\\(from\\|resent-from\\)"
			      ("0xdeadbeef@" . "0xdeadbeef-l")
			      ("gegai@.*io\\.org" . "from/andy")
			      ("gnats-bugs@netbsd.org" . "netbsd/gnats-bugs")
			      ;; code to make auto-folder default to the user name of the sender.
			      ;; this should be last in the auto folder alist since it tends to
			      ;; always match something.
			      ("<\\([^ \t\n\f@%()<>]+\\)[@%]\\([^ \t\n\f<>()]+\\)>" .
			       (concat "from/"
				       (downcase (buffer-substring (match-beginning 1)
								   (match-end 1)))))
			      ("<\\([^>]+\\)>" . 
			       (concat "from/"
				       (downcase (buffer-substring (match-beginning 1)
								   (match-end 1)))))
			      ("\\([^ \t\n\f@%()<>]+\\)\\([@%]\\([^ \t\n\f<>()]+\\)\\)?" .
			       (concat "from/"
				       (downcase (buffer-substring (match-beginning 1)
								   (match-end 1)))))
			      )
			     )
      vm-auto-folder-case-fold-search t	; so that vm-auto-folder-alist is simpler
      vm-auto-get-new-mail nil		; keep this manual for now
      vm-auto-next-message nil		; when you're at the bottom of the msg, stay there!
      vm-berkeley-mail-compatibility '(berkeley-unix netbsd)
      vm-check-folder-types t
      vm-circular-folders nil		; don't wrap around the folder
      vm-confirm-new-folders t		; be careful!
      vm-confirm-quit 1			; ask about quitting if unsaved changes
      vm-convert-folder-types t
      vm-crash-box "~/Mail/INBOX.CRASH"	; keep everything in the vm-folder-directory
      vm-default-folder-type 'From_
      vm-default-window-configuration '((startup
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary)
					     (nil message))
					    ((nil nil nil t)
					     (nil nil nil nil))))))
					(quitting
					 ((((top . 70)
					    (left . 70)))
					  (((0 0 80 40)
					    ((nil message))
					    ((nil nil nil t))))))
					(reading-message
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary)
					     (nil message))
					    ((nil nil nil t)
					     (nil nil nil nil))))))
					(composing-message
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary) ; show summary too
					     (nil composition))
					    ((nil nil nil nil)
					     (nil nil nil t))))))
					(editing-message
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary) ; show summary too
					     (nil edit))
					    ((nil nil nil nil)
					     (nil nil nil t))))))
					(vm-summarize
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary)
					     (nil message))
					    ((nil nil nil t)
					     (nil nil nil nil)))))))
      vm-delete-after-archiving nil
      vm-delete-after-bursting nil
      vm-delete-after-saving nil
      vm-delete-empty-folders t
      vm-digest-burst-type "rfc934"
      vm-digest-identifier-header-format "X-Digest: %s\n"
      vm-digest-center-preamble t
      vm-digest-preamble-format "\"%s\" (%F)"
      vm-digest-send-type "rfc934"
;;;   vm-edit-message-hook nil
      vm-edit-message-mode 'indented-text-mode ; slightly better than text-mode
      vm-flush-interval t
      vm-folder-directory "~/Mail/"	; the usual place
      vm-folder-read-only nil
      vm-follow-summary-cursor t
;;;   vm-forward-message-hook nil
      vm-forwarded-headers nil
      vm-forwarding-digest-type "rfc934"
      vm-forwarding-subject-format "forwarded message from %F"
      vm-frame-parameter-alist nil
      vm-frame-per-composition nil	;
      vm-frame-per-edit nil
      vm-frame-per-folder nil		;
      vm-highlight-url-face 'bold-italic
      vm-highlighted-header-regexp "^From:\\|^Subject:" ; highlight these headers
      vm-honor-page-delimiters nil
      vm-in-reply-to-format "%F's message\n	of \"%w, %m %d, %y %h %z\"\n	regarding \"%s\"\n	id %i"
					; just the way I like it!
      vm-included-text-attribution-format "[ On %w, %m %d, %y at %h (%z), %F wrote: ]\n> Subject: %s\n>\n"
					; just the way I like it!
      vm-included-text-discard-header-regexp nil
      vm-included-text-headers '("Keywords:"
				 "Newsgroups:"
				 "MIME-"
				 "Content-") ; try for manual MIME replies
      vm-included-text-prefix "> "
      vm-inhibit-startup-message t	; don't bother me with legalese
;;;   vm-init-file "~/.vm"
      vm-invisible-header-regexp nil
      vm-jump-to-new-messages t
      vm-jump-to-unread-messages t
      vm-keep-crash-boxes "~/tmp/"	; crash inbox saviour
      vm-keep-sent-messages 4		; keep a few for reference
      vm-mail-header-from (concat (user-login-name) "@" (vm-fqdn)
				  " (" (user-full-name) ")") ; this is also for
							     ; resent-from
;;;   vm-mail-hook nil
;;;   vm-mail-mode-hook nil
;;;   vm-mode-hook nil
      vm-mode-line-format '("" "  %&%& "
			    ("VM: " minor-mode-alist " "
			     (vm-folder-read-only "read-only ")
			     (vm-virtual-folder-definition (vm-virtual-mirror
							    "mirrored "))
			     "%b"
			     (vm-mail-buffer (vm-ml-sort-keys ("" " by "
							       vm-ml-sort-keys)))
			     (vm-message-list
			      ("   " vm-ml-message-number
			       " (of " vm-ml-highest-message-number ")")
			      (vm-folder-type
			       "   (unrecognized folder type)"
			       "   (no messages)")))
			    (vm-message-list
			     ("  %[ " vm-ml-message-attributes-alist
			      (vm-ml-labels ("; " vm-ml-labels)) " %]    ")
			     ("  %[%]   "))
			    "%p" "   " global-mode-string) ; show minor-mode too
      vm-mosaic-program "Mosaic"
      vm-move-after-deleting t		; keep on rolling
      vm-move-after-undeleting nil
      vm-move-messages-physically nil
      vm-movemail-program "movemail"
      vm-mutable-frames nil
      vm-mutable-windows t
;;; because of the silly way call-process works, and the horrid syntax
;;; of netscape's -remote option you'll need a script like this in order
;;; to start netscape on a remote host:
;; #! /bin/sh
;; 
;; NETSCAPEHOST=weird
;; NETSCAPEPATH=/usr/local/bin/netscape
;; 
;; if [ $# -eq 2 -a X"$1" = X"-remote" ] ; then
;; 	rsh $NETSCAPEHOST $NETSCAPEPATH -display $DISPLAY -remote "'$2'"
;; else
;; 	rsh $NETSCAPEHOST $NETSCAPEPATH -display $DISPLAY 
;; fi
      vm-netscape-program "netscape"
;;; shouldn't mess with this
;;;   vm-options-file "~/.vm.options"
      vm-pop-md5-program "md5"
      vm-preview-lines 4		; allow 4 lines of the body to show
      vm-preview-read-messages nil
      vm-primary-inbox "~/Mail/INBOX"	; keep everything in vm-folder-directory
;;;   vm-quit-hook nil
      vm-recognize-pop-maildrops "^[^:]+:[^:]+:[^:]+:[^:]+:[^:]+"
;;;   vm-reply-hook nil
      vm-reply-ignored-addresses (list (concat "\\("
					        "\\b"
						(user-login-name)
						"\\(\\s \\|$\\)"
					       "\\|"
					        "\\b"
						(user-login-name)
						"@\\(.*\\.\\)?"
						vm-local-domain-name
						"\\([^.]+\\|$\\)"
					       "\\)"))
					; just me!
      vm-reply-ignored-reply-tos nil
      vm-reply-subject-prefix "Re: "	; please do the standard thing!
      vm-resend-bounced-discard-header-regexp nil
      vm-resend-bounced-headers '("Resent-"
				  "Original-"
				  "MIME-"
				  "Content-"
				  "Date:"
				  "From:"
				  "To:"
				  "Cc:"
				  "Subject:"
				  "Message-ID:"
				  "In-Reply-To:"
				  "Newsgroups:"
				  "References:"
				  "Reply-to:"
				  "Keywords:"
				  "X-"
				  )	; keep MIME stuff and Original-'s too!
;;;   vm-resend-bounced-message-hook nil
      vm-resend-discard-header-regexp "\\(\\(X400-\\)?Received:\\|Resent-\\)"
      vm-resend-headers nil
;;;   vm-resend-message-hook nil
;;;   vm-retrieved-spooled-mail-hook nil
      vm-rfc1153-digest-discard-header-regexp "\\(X400-\\)?Received:"
      vm-rfc1153-digest-headers '("Resent-"
				  "Original-"
				  "MIME-"
				  "Content-"
				  "Date:"
				  "From:"
				  "Sender:"
				  "To:"
				  "Cc:"
				  "Subject:"
				  "Message-ID:"
				  "In-Reply-To:"
				  "Newsgroups:"
				  "References:"
				  "Reply-to:"
				  "Keywords:"
				  "X-"
				  )	; keep MIME stuff and Original-'s too!
      vm-rfc934-digest-discard-header-regexp nil
      vm-rfc934-digest-headers '("Resent-"
				 "Original-"
				 "MIME-"
				 "Content-"
				 "Date:"
				 "From:"
				 "Sender:"
				 "To:"
				 "Cc:"
				 "Subject:"
				 "Message-ID:"
				 "In-Reply-To:"
				 "Newsgroups:"
				 "References:"
				 "Reply-to:"
				 "Keywords:"
				 "X-"
				 )	; keep MIME stuff and Original-'s too!
      vm-search-using-regexps nil
;;;   vm-select-message-hook nil
;;;   vm-select-new-message-hook nil
;;;   vm-select-unread-message-hook nil
;;;   vm-send-digest-hook nil
      vm-skip-deleted-messages 1	; don't bother if none to see...
      vm-skip-read-messages nil
      vm-startup-with-summary t
      vm-strip-reply-headers nil
      vm-summary-format "%3n%*%A %-18.18F %4y/%02M/%02d-%H %4l/%-5c %I\"%s\"\n"
					; ah, that's better! (except %02d
					; doesn't put leading zeros out)
      vm-summary-highlight-face nil	; don't bother -- too much CPU!
;;;   vm-summary-mode-hook nil
;;;   vm-summary-redo-hook nil
      vm-summary-show-threads nil
      vm-summary-subject-no-newlines t
      vm-summary-thread-indent-level 2
      vm-summary-uninteresting-senders (concat "\\("
					        "\\b"
						(user-login-name)
						"\\(\\s \\|$\\)"
					       "\\|"
					        "\\b"
						(user-login-name)
						"@\\(.*\\.\\)?"
						vm-local-domain-name
						"\\([^.]+\\|$\\)"
					       "\\)")
					; just me!
      vm-summary-uninteresting-senders-arrow "To: "
      vm-tale-is-an-idiot t		; sounds good to me!
      vm-trust-From_-with-Content-Length nil
;;;   vm-undisplay-buffer-hook nil
      vm-unforwarded-header-regexp "only-drop-this-header"
      vm-url-browser 'vm-mouse-send-url-to-netscape
      vm-url-search-limit 12000
      vm-use-menus '(folder
		     motion
		     send
		     mark
		     label
		     sort
		     virtual
		     undo
		     dispose
		     emacs
		     nil
		     help
		     )
      vm-virtual-folder-alist nil
      vm-virtual-mirror t
      vm-visible-headers '("Newsgroups:"	; better for forwarded news
			   "X-[^VFS][^Mat]"	; try to avoid X-VM-*, X-Status, and X-Face
			   "Resent-[^M]"	; try to avoid Resent-Message-ID:
			   "Original-[^M]"	; try to avoid Original-Message-ID:
			   "From:"
			   "Reply-to:"
			   "Sender:"
			   "To:"
			   "Apparently-To:"
			   "Cc:"
			   "Date:"
			   "Subject:"
			   "Keywords:"		; could be interesting
			   "Summary:"		; more people should use this
			   )
;;;   vm-visit-folder-hook nil
      vm-visit-when-saving 0
      vm-warp-mouse-to-new-frame nil
      vm-window-configuration-file nil		; don't allow saves
      )

;;;
;;;	End Of File
;;;
