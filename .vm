;;;;
;;;;	.vm.el - startup initialisation for ViewMail
;;;;
;;;#ident	"@(#)HOME:.vm	22.3	01/11/13 12:43:30 (woods)"
;;;
;;; per-user start-up functions for GNU-emacs VM package (View-Mail)
;;;

(require 'sendmail)			; get this over with right away
(require 'vm-menu)			; and this too....

(setq vm-version-number (string-to-number vm-version))

(defvar my-vm-netscape-display "xtremely:0"
  "Display name to pass to netscape in vm-netscape-program-switches.")

(add-hook 'mail-setup-hook 'mail-abbrevs-setup)
(add-hook
 'mail-setup-hook
 '(lambda ()
    ;; it would be nice to have mail-abbrev-next-header and maybe
    ;; mail-abbrev-goto-mail-text and mail-abbrev-comma too....
    ;; mail-abbrev-end-of-buffer is useless with signature files.
    (substitute-key-definition 'next-line 'mail-abbrev-next-line
                               mail-mode-map global-map)))

;;; Kyle's filladapt from http://www.wonderworks.com/
;;;
;;; WARNING:  elisp-file-in-load-path-p is a local function in my ~/.emacs.el
;;;
(if (and (fboundp 'elisp-file-in-loadpath-p)
	 (elisp-file-in-loadpath-p "filladapt"))
    (progn
      (require 'filladapt)
      (add-to-list 'filladapt-token-table '("To: " bullet))
      (add-to-list 'filladapt-token-table '("Cc: " bullet))))

;; mail-x-face-file thanks to John Owens <owens@graphics.stanford.edu>
;;
(defvar mail-x-face-file "~/.face"
  "Name of file containing contents for X-Face header")
(defun mail-insert-x-face ()
  "Insert an X-Face header containing the contents of mail-x-face-file."
  (if (file-exists-p mail-x-face-file)
      (save-excursion 
	(goto-char (point-min))
	(search-forward mail-header-separator)
	(beginning-of-line nil)
	(insert "X-Face:")
	(insert-file mail-x-face-file))))
(add-hook 'mail-setup-hook 'mail-insert-x-face)

;;; mailcrypt --- a simple interface to message encryption with PGP.
;;;
;;; WARNING:  elisp-file-in-load-path-p is a local function in my ~/.emacs.el
;;;
(if (and (fboundp 'elisp-file-in-loadpath-p)
	 (elisp-file-in-loadpath-p "mailcrypt"))
    (progn
      (load-library "mailcrypt")
      (mc-setversion "5.0")
      (add-hook 'vm-mode-hook 'mc-install-read-mode)
      (add-hook 'vm-summary-mode-hook 'mc-install-read-mode)
      (add-hook 'vm-virtual-mode-hook 'mc-install-read-mode)
      (add-hook 'vm-mail-mode-hook 'mc-install-write-mode)))

;;;;
;;;; mail-mode stuff....
;;;;

;;;From: friedman@splode.com (Noah Friedman)
;;;In-Reply-To: <srandall@quixote.asic.sc.ti.com> , 13 May 1997 10:32:32 -0500
;;;References: <wq9d8qvie0f.fsf@quixote.i-have-a-misconfigured-system-so-shoot-me>
;;;Message-Id: <19970514015519.FMU96188@piglet.splode.com>
;;;To: srandall@quixote.asic.sc.ti.com
;;;Cc: info-vm@uunet.uu.net
;;;Date: Wed, 14 May 1997 01:55:19 -0700 (PDT)
;;;Subject: please help me fix minor annoyances in vm

(define-key mail-mode-map "\C-i" 'mail-goto-next-header-or-insert)

(define-key mail-mode-map [S-tab] 'mail-goto-previous-header)

(defun mail-goto-previous-header (&optional count)
  "Call mail-goto-next-header-or-insert with (- COUNT)"
  (interactive "p")
  (mail-goto-next-header-or-insert (- count)))

(defun mail-goto-next-header-or-insert (&optional count)
  "If in header area, go to beginning of next header.
If point is not in the header area, just insert the character which
invoked this command.

With numeric prefix arg, skip forward that many headers.
If prefix arg is negative, skip backward that many headers.

If either the head or tail of the headers are reached, wrap around
to the other end and continue."
  (interactive "p")
  (let* ((headers-end
	  (save-excursion
	    (goto-char (point-min))
	    (re-search-forward
	     (concat "^" (regexp-quote mail-header-separator) "$"))
	    (match-beginning 0)))
	 (forwardp (or (null count) (> count 0)))
	 (fn (if forwardp 're-search-forward 're-search-backward))
	 (la (if forwardp 2 1))
	 (nla (if forwardp 1 2))
	 (re "^[^:\n\t ]+:")
	 (i (abs count)))
    (cond ((>= (point) headers-end)
	   (call-interactively 'self-insert-command))
	  (t
	   (save-restriction
	     (narrow-to-region (point-min) headers-end)
	     (while (not (zerop i))
	       (cond
		((funcall fn re nil t (if (looking-at re) la nla)))
		(t
		 (goto-char (point-min))
		 (funcall fn re nil t)))
	       (setq i (1- i)))
	     (goto-char (match-end 0))
	     (and (looking-at "[ \t]")
		  (forward-char 1)))))))

;;
;; dired stuff...
;;

;;Message-ID: <cxjpv5he74u.fsf@engc.bu.edu>
;;References: <cajhfquqejw.fsf@faui5pc29.informatik.uni-erlangen.de>
;;Date: 06 Apr 1999 18:06:25 -0400
;;From: David Bakhash <cadet@bu.edu>
;;Organization: Boston University
;;Subject: Re: Selecting a special  mail
;;To: info-vm@uunet.uu.net
;;
;; I don't think that's feasible given the command interface that VM
;; has.  With some programming, you can probably figure out something,
;; but the best way to do it, of course, is to just use vm-visit-folder
;; instead of find-file.  If you visit with dired, then use the `r'
;; binding (XEmacs), and you will visit it with vm-visit-folder instead
;; of find-file.  If you're using GNU Emacs, then try this code out in
;; your ~/.emacs file:
;;
(defun dired-vm (&optional read-only)
  "Run VM on this file.
With prefix arg, visit folder read-only (this requires at least VM 5).
See also variable `dired-vm-read-only-folders'."
  (interactive "P")
  (let ((dir (dired-current-directory))
        (fil (dired-get-filename)))
    ;; take care to supply 2nd arg only if requested - may still run VM 4!
    (require 'vm)			; vm-visit-folder may not be an autoload
    (setq this-command 'vm-visit-folder) ; for vm window config
    (if read-only
        (vm-visit-folder fil t)
      (vm-visit-folder fil))
    ;; so that pressing `v' inside VM does prompt within current directory:
    (set (make-local-variable 'vm-folder-directory) dir)))

(add-hook 'dired-mode-hook 
	  '(lambda ()
	     (require 'dired-x)
	     (define-key dired-mode-map "r" 'dired-vm)))

;;;
;;;	VM related things
;;;

(define-key mail-mode-map "\C-ci" 'ispell-message)
(define-key mail-mode-map "\M-S" 'ispell-message)
(define-key vm-mode-map "/" 'vm-isearch-forward)

(defvar my-vm-virtual-leftovers-folder "General Delivery"
  "The name of the virtual folder containing all the messages which are not
members of other virtual folders.  (It's created after all the others are
created by my-vm-visit-all-virtual-folders.)

NOTE:  Changes to this variable only take effect when your .vm is reloaded.")

(defun my-vm-quit-all-virtual-folders ()
  "Quit from all of the virtual folders in vm-virtual-folder-alist."
  (interactive)
  (let ((vfolder vm-virtual-folder-alist))
    (while vfolder
      (save-excursion
	(condition-case error-data
	    (let ((vm-confirm-quit nil))
	      (set-buffer (concat "(" (car (car vfolder)) ")"))
	      (vm-quit))
	  (error nil))
	(setq vfolder (cdr vfolder))))))

(defun my-vm-visit-all-virtual-folders ()
  "Visit all of the virtual folders in vm-virtual-folder-alist."
  (interactive)
  (let ((vfolder vm-virtual-folder-alist))
    (while vfolder
      (let ((vfname (car (car vfolder))))
	(if (not (string-equal vfname my-vm-virtual-leftovers-folder))
	    (vm-visit-virtual-folder vfname))
	(setq vfolder (cdr vfolder)))))
  (vm-visit-virtual-folder my-vm-virtual-leftovers-folder))

(defun my-vm-resync-all-virtual-folders ()
  "Revisit all virtual folders to update them.  This doesn't seem to be
necessary any more with newer versions of VM, eg. 6.62."
  (interactive)
  (save-excursion
    ;; this is no longer necessary with newer versions of VM, eg. 6.62
    ;;(my-vm-quit-all-virtual-folders)
    ;; make sure all new messages are in their target folders so that the magic
    ;; for the General Delivery folder works....
    (my-vm-visit-all-virtual-folders)))

(defun my-vm-get-new-mail ()
  "Local version of vm-get-new-mail that updates all virtual folders in
vm-virtual-folder-alist."
  (interactive)
  (save-excursion
    ;; this is no longer necessar with newer versions of VM, eg. 6.62
    ;;(my-vm-quit-all-virtual-folders)
    ;; instead we only need to quit the "General Delivery" folder:
    (save-excursion
      (condition-case error-data
	  (let ((vm-confirm-quit nil))
	    (set-buffer (concat "(" my-vm-virtual-leftovers-folder ")"))
	    (vm-quit))
	(error nil)))
    (set-buffer (vm-get-file-buffer vm-primary-inbox))
    (vm-get-new-mail)
    ;; make sure all new messages are in their target folders so that the magic
    ;; for the General Delivery folder works....
    (my-vm-visit-all-virtual-folders)))

;; This overrides the normal binding of 'G' to vm-sort-messages....
(define-key vm-mode-map "G" 'my-vm-get-new-mail)

(defun my-vm-quit ()
  "Local version of vm-quit that quits all virtual buffers if quitting
vm-primary-inbox."
  (interactive)
  (vm-select-folder-buffer)
  (if (eq major-mode 'vm-virtual-mode)
      (vm-quit)
    (if (string-equal (buffer-file-name)
		      (expand-file-name vm-primary-inbox))
	(my-vm-quit-all-virtual-folders))
    (vm-quit)))

(define-key vm-mode-map "q" 'my-vm-quit)

(require 'ispell)
(add-hook 'vm-mail-mode-hook
	  (function (lambda () (local-set-key "\C-ci" 'ispell-message))))

(setq ispell-message-text-end
      (mapconcat (function identity)
		 (list ispell-message-text-end
		       "^-- $"		; XXX this is in orig, but it's not!
		       "^-----BEGIN PGP " ; PGP 
		       "&This is a[-A-Z0-9 ]+digest" ; digest
		       )
		 "\\|"))

(require 'advice)
(defadvice vm-summarize (after my-vm-summarize activate)
  "Also call vm-emit-totals-blurb after vm-summarize."
  (vm-emit-totals-blurb))

(defun my-vm-auto-archive-messages ()
  "Local version of vm-auto-archive-messages that obtains user confirmation."
  (interactive)
  (if (y-or-n-p "Are you really sure you want to archive all messages???")
      (vm-auto-archive-messages)))

(define-key vm-mode-map "A" 'my-vm-auto-archive-messages)

;; this is done this way so that it remains compatible with pre-6.x VM
(defun my-vm-forward-message-using-rfc934 ()
  "Local version of vm-forward-message that uses rfc934 encapsulation and
avoids any MIME transfer encoding.  Pine 3.96 cannot show headers in MIME
message/rfc822 attachments."
  (interactive)
  (let ((vm-forwarding-digest-type "rfc934"))
    (vm-forward-message)
    (set (make-local-variable 'vm-send-using-mime) nil)))

(define-key vm-mode-map "Z" 'vm-forward-message) ; use default (mime)
(define-key vm-mode-map "z" 'my-vm-forward-message-using-rfc934)

;;;
;;; some assistance for spam-handling
;;;
(defun my-vm-rblookup-at-point ()
  "Run rblookup on the address or name at the point."
  (interactive)
  (message "sorry -- not yet implemented!")
)

;;;
;;; from Jukka Partanen <jukka.partanen@research.nokia.com>.
;;;
(if (>= vm-version-number 6.0)
    (progn
      (defun vm-mime-delete-mime-body-part (&optional layout)
	"Delete the mime body part at the point"
	(interactive)
	(if (not layout)
	    (setq layout
		  (if (and vm-fsfemacs-p (= emacs-major-version 19))
		      (let (o-list (overlays-at (point)))
			(while (and o-list
				    (not (overlay-get (car o-list) 'vm-mime-layout)))
			  (setq o-list (cdr o-list)))
			(car o-list))
		    (extent-at (point) nil 'vm-mime-layout))))
	(let ((mp vm-message-pointer)
	      start end buf)
	  (if (not layout)
	      (error "No MIME body at point!"))
	  (if (not (vectorp layout))
	      (setq layout (vm-extent-property layout 'vm-mime-layout)))
	  (setq start  (vm-mm-layout-header-start layout)
		end    (vm-mm-layout-body-end layout)
		buf	 (marker-buffer start))
	  (save-excursion
	    (set-buffer buf)
	    (vm-save-restriction
	     (widen)
	     (narrow-to-region (vm-headers-of (vm-real-message-of (car mp)))
			       (vm-text-end-of (vm-real-message-of (car mp))))
	     (let ((buffer-read-only nil)
		   (type (vm-get-header-contents (car mp) "Content-Type:"))
		   boundary)
	       (setq type (vm-mime-parse-content-header type ?\;))
	       (while type
		 (if (string-match "^boundary=" (car type))
		     (setq boundary (car (vm-parse (car type) "=\\(.+\\)"))
			   type nil)
		   (setq type (cdr type))))
	       (if (not boundary)
		   (error "Cannot find MIME boundary!"))
	       (goto-char start)
	       (if (not (re-search-backward (concat "\n--"
						    (regexp-quote boundary))
					    (point-min) t))
		   (error "Cannot find MIME boundary!"))
	       (delete-region (point) end)
	       (if (and (looking-at (concat "\n*--" (regexp-quote boundary) "--"))
			(not (re-search-backward (concat "^--"
							 (regexp-quote boundary))
						 (point-min) t)))
		   (insert (concat "\n--" boundary "\n\n")))))
	    (vm-discard-cached-data)
	    (vm-set-edited-flag-of (car mp) t)
	    (vm-show-current-message))))
      (define-key vm-mode-map "X" 'vm-mime-delete-mime-body-part)))

;;;
;;; some more enhancements
;;; borrowed from gnuspost.el
;;;
(defvar vm-local-domain-name nil
  "*Local domain name for mail purposes.")

(if (not (fboundp 'vm-fqdn))
    (defun vm-fqdn (&optional genericfrom)
      "Return user's fully qualified domain name.
If optional argument GENERICFROM is a string, use it as the domain
name; if it is non-nil, strip of local host name from the domain name.
If the function `system-name' returns full internet name and the
domain is undefined, the domain name is got from it."
      (let ((domain (or (if (stringp genericfrom) genericfrom)
			(let ((envvalue (getenv "DOMAINNAME")))
			  (if (string-equal envvalue "")
			      nil
			    envvalue))
			vm-local-domain-name
			;; Function `system-name' may return full internet name.
			;; Suggested by Mike DeCorte <mrd@sun.soe.clarkson.edu>.
			(if (string-match "\\." (system-name))
			    (substring (system-name) (match-end 0)))
			(read-string "Domain name (no host): ")))
	    (host (or (if (string-match "\\." (system-name))
			  (substring (system-name) 0 (match-beginning 0)))
		      (system-name))))
	(if (string-equal "." (substring domain 0 1))
	    (setq domain (substring domain 1)))
	(if (null vm-local-domain-name)
	    (setq vm-local-domain-name domain))
	;; Support GENERICFROM as same as standard Bnews system.
	;; Suggested by ohm@kaba.junet and vixie@decwrl.dec.com.
	(cond ((null genericfrom)
	       (concat host "." domain))
	      (t domain)))))

(if (not (fboundp 'vm-generate-message-id))
    (defun vm-generate-message-id ()
      "Generate unique Message-Id value for user."
      (concat "<" (vm-unique-id) "@" (vm-fqdn) ">")))

(if (not (fboundp 'vm-unique-id))
    (defun vm-unique-id ()
      "Generate unique ID from user name and current time."
      (let ((date (current-time-string))
	    (name (user-login-name)))
	(if (string-match "^[^ ]+ \\([^ ]+\\)[ ]+\\([0-9]+\\) \\([0-9]+\\):\\([0-9]+\\):\\([0-9]+\\) [0-9][0-9]\\([0-9][0-9]\\)"
			  date)
	    (concat (upcase name) "."
		    (substring date (match-beginning 6) (match-end 6)) ;Year
		    (substring date (match-beginning 1) (match-end 1)) ;Month
		    (substring date (match-beginning 2) (match-end 2)) ;Day
		    (substring date (match-beginning 3) (match-end 3)) ;Hour
		    (substring date (match-beginning 4) (match-end 4)) ;Minute
		    (substring date (match-beginning 5) (match-end 5)) ;Second
		    )
	  (error "Cannot understand current-time-string: %s." date)))))

;;;
;;; this borrowed from gnus-art.el....
;;;
(defun vm-url-unhex (x)
  "Convert X from a hex representation to the actual value."
  (if (> x ?9)
      (if (>= x ?a)
          (+ 10 (- x ?a))
        (+ 10 (- x ?A)))
    (- x ?0)))

;;;
;;; this also borrowed from gnus-art.el....
;;;
(defun vm-url-unhex-string (str &optional allow-newlines)
  "Return a string with the %XX embedded codes removed from the url giving in STR.
If optional second argument ALLOW-NEWLINES is non-nil, then allow the
decoding of carriage returns and line feeds in the string, which is normally
forbidden in URL encoding."
  (setq str (or str ""))
  (let ((tmp "")
        (case-fold-search t))
    (while (string-match "%[0-9a-f][0-9a-f]" str)
      (let* ((start (match-beginning 0))
             (ch1 (vm-url-unhex (elt str (+ start 1))))
             (code (+ (* 16 ch1)
                      (vm-url-unhex (elt str (+ start 2))))))
        (setq tmp (concat
                   tmp (substring str 0 start)
                   (cond
                    (allow-newlines
                     (char-to-string code))
                    ((or (= code ?\n) (= code ?\r))
                     " ")
                    (t (char-to-string code))))
              str (substring str (match-end 0)))))
    (setq tmp (concat tmp str))
    tmp))

;;; Turn this horror of a URL:
;;;
;;;	http://angelfire.com%40%77%77%77%2E%63%79ber%67%61%74%65w%61%79%2E%6E%65%74/t%68e%72%65%6D%6F%76e%31/r%65%6Do%76%65%2E%68%74%6D#@f%72%65%65%79%65%6C%6C%6Fw.%63%6F%6D/%6D%65%6D%62%65%72%73/b%69%67%6Der%63%68a%6E%74%73%74%75%66%66/i%6Edex%2E%68%74%6D%6C
;;;
;;; into this at least semi-readable URL:
;;;
;;;	http://angelfire.com@www.cybergateway.net/theremove1/remove.htm#@freeyellow.com/members/bigmerchantstuff/index.html
;;;
(defun vm-url-unhex-region (beg end)
  "Remove %XX embedded codes in a URL marked as the current region."
  (interactive "r")
  (if (integerp end)			; dunno -- was in morse.el
      (setq end (copy-marker end)))
  (save-excursion
    (let ((str (buffer-substring beg end)))
      (goto-char beg)
      (delete-region beg end)
      (insert (vm-url-unhex-string str)))))


;;; Message-ID: <4vnura$cgr@nnrp1.news.primenet.com>
;;; From: edwinh@primenet.com (Edwin Huffstutler)
;;; Date: 24 Aug 1996 15:14:02 -0700
;;; Subject: Remove "extra" text from replies
;;; Summary: functions to remove .sigs, double citations
;;; 
;;; Create a function to nuke a .sig from replied-to mail (if it exists).  
;;; Find the end of the buffer, back up over my .sig, then delete up to 
;;; the beginning of the quoted .sig. 
(defun citation-kill-sig ()
  "Nuke a .sig from cited mail"
  (interactive)
  (save-excursion
    (goto-char (point-max))
    (search-backward-regexp "^-- $" 1 t)
    (let ((top-of-my-sig (point)))
      (search-backward-regexp 
       (concat "^" vm-included-text-prefix "-- $") 1 t)
      (delete-region (point) top-of-my-sig)
      )))

(add-hook 'vm-reply-hook
	  'citation-kill-sig)

;;; more from: edwinh@primenet.com (Edwin Huffstutler)
;;; 
;;; This next one I bind to C-c C-d in a reply buffer, and it deletes anything
;;; that has been quoted twice, and removes included-text-prefixes on blank
;;; lines.  (I just think it looks cleaner that way, as I usually reply to
;;; each paragraph of the mail separately)
;;; 
;;; define a function to remove doubly-cited stuff
(defun citation-kill-double ()
  "Remove doubly-cited text and extra lines in a mail message"
  (interactive)
  (save-excursion
    ;;; nuke the quoted quoted text
    ;;(beginning-of-buffer)
    ;;(replace-regexp
    ;; (concat "^" vm-included-text-prefix "\\sw*[>|}].*\n") "")
    ;;; get rid of citation prefix on blank lines
    (beginning-of-buffer)
    (replace-regexp
     (concat "^" vm-included-text-prefix "$") "")
    ;;; replace more than two newlines with just two
    (beginning-of-buffer)
    (replace-regexp "\n\n+" "\n\n")
    ;;; get rid of double attribution text
    ;;(beginning-of-buffer)
    ;;(replace-regexp
    ;; (concat "^" vm-included-text-prefix "\\[ .*wrote.*\\]\n\\|"
    ;;         "^" vm-included-text-prefix ".*wrote:\n") "")
    ))

(defun citation-set-kill-double-binding ()
  "Set the binding for citation-kill-double"
  (local-set-key "\C-c\C-d" 'citation-kill-double))

(add-hook 'vm-reply-hook
	  'citation-set-kill-double-binding)

;;;
;;;	some stuff for sendmail.el ...
;;;

(setq mail-signature t)			; auto-insert ~/.signature
(setq mail-default-reply-to (concat (user-login-name) "@" (vm-fqdn t)
				    " (" (user-full-name) ")"))
(setq mail-header-separator ".")	; as close to nothing as possible

;;(setq mail-archive-file-name "~/Mail/.outgoing") ; for posterity
;;
;;; From: bhoylma@advtech.USWest.COM (Bruce W. Hoylman)
;;; SENDER: info-vm-request@uunet.uu.net
;;; Subject: Re: Newbie wants VM to auto-archive mail like (shudder) pine
;;; Date: 30 May 1995 10:57:11 -0600
(add-hook 'vm-mail-mode-hook
	  ;; Mail archive filename defun
	  (defun set-mail-archive-file-name ()
	    (let ((date (current-time-string)))
	      (string-match
	       "^\\([A-Z][a-z][a-z]\\) \\([A-Z][a-z][a-z]\\) \\([0-9 ][0-9]\\) \\([0-9][0-9]:[0-9][0-9]\\)\\(:[0-9][0-9]\\) [0-9][0-9]\\([0-9][0-9]\\)"
	       date)
	      (setq mail-archive-file-name
		    (concat vm-folder-directory
			    ".outgoing/"
			    (substring date (match-beginning 6)
				       (match-end 6))
			    "-"
			    (substring date (match-beginning 2)
				       (match-end 2)))))))

;; or maybe this simpler one is better?
;;
;;; Message-ID: <xyn672uie3j.fsf@alta11.hns.com>
;;; Date: 05 Aug 1999 08:52:48 -0400
;;; From: Brian Snyder <bsnyder@hns.com>
;;; Organization: Hughes Network Systems
;;; Subject: Re: mail archiving
;;; To: info-vm@uunet.uu.net
;;
;(add-hook 'mail-send-hook ;define FCC
;	  '(lambda()
;	     (mail-fcc (format "~/Mail/vm/sm-%s%s"
;			       (downcase (substring (current-time-string) 4 7))
;			       (substring (current-time-string) 22 24)))))
;
; Kyle also suggests this for mail-send-hook:
;
;(defun german-suplex-lauryn-hill ()
;  (save-excursion
;    (goto-char (point-min))
;    (if (re-search-forward "^FCC:" (save-excursion (mail-text) (point)) t)
;	(progn
;	  (beginning-of-line)
;	  (delete-region (point) (progn (forward-line 1) (point)))))
;    (insert "FCC: " (format-time-string "~/Mail/%Y-%B.sent\n"))))

(defvar mail-default-organization "~/.organization"
  "The default name of your organization (or filename containing a string
defining the organization name), if not set in the environment variable
ORGANIZATION.  If not nil, takes precedence over the file
{$LOCAL,/usr}/lib/news/organization.")

(setq mail-default-headers
      (concat
       (if (< vm-version-number 6.0)
	   (concat "X-Mailer: ViewMail (vm) Version "
		   vm-version
		   "\n\twith "
		   (emacs-version)
		   "\n"))
       (concat "Organization: "
	       (let* ((org-list (list (getenv "ORGANIZATION")
				      mail-default-organization
				      (concat (or (getenv "LOCAL")
						  "/usr/")
					      "lib/news/organization")))
		      (org nil))
		 (while (and (not org)
			     (cdr org-list))
		   (let ((org-file (car org-list)))
		     (setq org-list (cdr org-list))
		     (cond ((not org-file)
			    (setq org nil))
			   ((file-name-absolute-p org-file)
			    (setq org-file (expand-file-name org-file "/"))
			    (if (file-exists-p org-file)
				(let ((org-buffer (generate-new-buffer
						   (generate-new-buffer-name
						    "orgbuf"))))
				  (save-excursion
				    (set-buffer org-buffer)
				    (insert-file-contents org-file)
				    (goto-char (point-max))
				    (let ((fill-prefix "\t")
					  (fill-column 72))
				      (fill-region (point-min) (point-max)))
				    (let ((end-pt (point)))
				      (skip-chars-backward "\ \t\n")
				      (delete-region (point) end-pt))
				    (setq org (buffer-string))
				    (not-modified)
				    (kill-buffer nil)))))
			   (t
			    (setq org org-file)))))
		 org)
	       "\n")))			; mail-mode needs the trailing newline,
					; VM will cope either way

;;;
;;; VM fontification support...
;;;

(defface vm-test-region-face
  '((((class color)
      (background dark))
     (:background "SteelBlue" :stipple "gray3"))
    (((class color)
      (background light))
     (:background "LightSteelBlue" :stipple "gray3"))
    (((class grayscale)
      (background dark))
     (:background "LightGray" :foreground "black" :stipple "gray3"))
    (((class grayscale)
      (background light))
     (:background "DimGray" :foreground "White" :stipple "gray3"))
    (((class mono)
      (background dark))
     (:background "White" :foreground "black" :stipple "gray3"))
    (((class mono)
      (background light))
     (:background "black" :foreground "White" :stipple "gray3"))
    (t
     (:background "gray")))
  "Used for displaying a test region.")

(defface vm-citation-face
  '((((class color)
      (background dark))
     (:foreground "Khaki" :italic t))
    (((class color)
      (background light))
     (:foreground "FireBrick" :italic t))
    (t
     (:italic t)))
  "Face for VM citation contents.")

;; VM header font faces

(defface vm-header-name-face
  '((((class color)
      (background dark))
     (:foreground "White" :bold t))
    (((class color)
      (background light))
     (:foreground "black" :bold t))
    (t
     (:bold t)))
  "Face for VM header names.")

(defface vm-resent-header-name-face
  '((((class color)
      (background dark))
     (:foreground "Red" :bold t :italic t :underline t))
    (((class color)
      (background light))
     (:foreground "DarkGreen" :bold t :italic t :underline t))
    (t
     (:bold t :italic t :underline t)))
  "Face for VM From: header contents.")

(defface vm-header-content-face
  '((((class color)
      (background dark))
     (:foreground "White" :italic t))
    (((class color)
      (background light))
     (:foreground "black" :italic t))
    (t
     (:italic t)))
  "Face for generic VM header contents.")

(defface vm-header-from-face
  '((((class color)
      (background dark))
     (:foreground "Red" :bold t :underline t))
    (((class color)
      (background light))
     (:foreground "DarkGreen" :bold t :underline t))
    (t
     (:bold t :underline t)))
  "Face for VM From: header contents.")

(defface vm-organization-face
  '((((class color)
      (background dark))
     (:foreground "SlateBlue" :italic t))
    (((class color)
      (background light))
     (:foreground "DarkSlateBlue" :italic t))
    (t
     (:italic t)))
  "Face for VM Organization: contents.")

(defface vm-header-reply-face
  '((((class color)
      (background dark))
     (:foreground "blue" :bold t :underline t))
    (((class color)
      (background light))
     (:foreground "NavyBlue" :bold t :underline t))
    (t
     (:bold t :underline t)))
  "Face for VM Reply-To: header contents.")

(defface vm-to-face
  '((((class color)
      (background dark))
     (:foreground "Green" :bold t :italic t))
    (((class color)
      (background light))
     (:foreground "ForestGreen" :bold t :italic t))
    (t
     (:italic t)))
  "Face for VM To: contents.")

(defface vm-header-cc-face
  '((((class color)
      (background dark))
     (:foreground "OrangeRed" :bold t :underline t))
    (((class color)
      (background light))
     (:foreground "DarkSeaGreen" :bold t :underline t))
    (t
     (:bold t :underline t)))
  "Face for VM Cc: header contents.")

(defface vm-header-subject-face
  '((((class color)
      (background dark))
     (:foreground "Yellow" :bold t :italic t :underline t))

    (((class color)
      (background light))
     (:foreground "IndianRed" :bold t :italic t :underline t))
    (t
     (:bold t :italic t :underline t)))
  "Face for VM Subject: header contents.")

;; Note that these REs are matched across the entire buffer
;;
;; Unfortunately it doesn't seem very easy to use REs to match full RFC-822
;; headers.  Ideally multi-line header contents would be matched.  Perhaps this
;; could be done with the appropriate syntax magic, but I haven't figured that
;; part out yet.
;;
(setq vm-font-lock-keywords
      '(t
	("^\\(Subject:\\) \\(.+\\)$"
	 (1 'vm-header-name-face)
	 (2 'vm-header-subject-face))
        ("^\\(From:\\) \\(.+\\)$"
	 (1 'vm-header-name-face)
	 (2 'vm-header-from-face))
        ("^\\(Organization:\\) \\(.+\\)$"
	 (1 'vm-header-name-face)
	 (2 'vm-organization-face))
        ("^\\(Reply-To:\\) \\(.+\\)$"
	 (1 'vm-header-name-face)
	 (2 'vm-header-reply-face))
        ("^\\(To:\\) \\(.+\\)$"
	 (1 'vm-header-name-face)
	 (2 'vm-to-face))
        ("^\\(Cc:\\) \\(.+\\)$"
	 (1 'vm-header-name-face)
	 (2 'vm-header-cc-face))
	;; Resent-* headers
	("^\\(resent-[^ \t\n:]+:\\) \\(.+\\)$"
	 (1 'vm-resent-header-name-face)
	 (2 'vm-header-content-face))
	;; Other headers
	("^\\([^ \t\n:]+:\\) \\(.+\\)$"
	 (1 'vm-header-name-face)
	 (2 'vm-header-content-face))
 	;; citations (try to avoid Unix mailbox ">From" quoting)
        ("^[a-z0-9 \t]*[>|}:]+\\(.+\\)$"
	 (1 'vm-citation-face))))

(defun vm-fontify ()
  (make-local-variable 'font-lock-defaults)
  ;; fontify with keywords only (no syntax spec) and ignore case
  (setq font-lock-defaults '(vm-font-lock-keywords t t))
  (turn-on-font-lock))

;(cond (window-system
;       (add-hook 'vm-mode-hook
;		 'vm-fontify)
;       (add-hook 'vm-presentation-mode-hook
;		 'vm-fontify)
;       (add-hook 'vm-mail-mode-hook
;		 'vm-fontify)
;       (add-hook 'vm-edit-message-hook
;		 'vm-fontify)))

;; This summary stuff is way too CPU intensive when you have as many virtual
;; folders open as I do (especially on a machine as slow as mine! ;-).
;;
;; Summary frame keywords
;(setq vm-summary-font-lock-keywords
;      '(("|> [^ ].*"		. font-lock-function-name-face)
;	("|>   .*"		. font-lock-comment-face)
;	("\\[list1\\]"		. font-lock-function-name-face)
;	("company1 \\| company2" . font-lock-function-name-face)
;	("\\[list2\\]"		. font-lock-variable-name-face)
;	("\\[list3\\]"		. font-lock-variable-name-face)
;	("\\[list4\\]"		. font-lock-type-face)
;	("\\[list5\\]"		. font-lock-comment-face)
;	("list6||\list7"	. font-lock-keyword-face)))

;(defun vm-summary-fontify ()
;  (make-local-variable 'font-lock-defaults)
;  (setq font-lock-defaults '(vm-summary-font-lock-keywords nil nil))
;  (turn-on-font-lock))

;(cond (window-system
;       (add-hook 'vm-summary-mode-hook
;		 'vm-summary-fontify)
;       (add-hook 'vm-summary-update-hook
;		 'vm-summary-fontify)
;       (add-hook 'vm-summary-mode-hook
;		 'vm-summary-fontify)
;       (add-hook 'vm-summary-update-hook
;		 'vm-summary-fontify)))

;; commented lines indicate changed values....  (from v6.75)
;;
(setq 
;;;   vm-arrived-message-hook nil
;;;   vm-arrived-messages-hook nil
      vm-auto-center-summary nil
      vm-auto-decode-mime-messages nil	; might miss text in preamble otherwise!
      vm-auto-displayed-mime-content-type-exceptions '("text/x-vcard"
						       "text/html"
						       ) ; vcard is *UGLY*
      vm-auto-displayed-mime-content-types '("text" ; all sub-parts implied
					     "multipart" ; all sub-parts implied
					     "message/rfc822"
					     ) ; we like text!
      vm-auto-folder-case-fold-search t	; so that vm-auto-folder-alist is simpler
      vm-auto-get-new-mail nil		; keep this manual for now
      vm-auto-next-message nil		; when you're at the bottom of the msg, stay there!
      vm-berkeley-mail-compatibility '(berkeley-unix netbsd)
      vm-check-folder-types t
      vm-circular-folders nil
      vm-confirm-new-folders t		; be careful!
      vm-confirm-quit t			; always ask about quitting
      vm-convert-folder-types t
      vm-crash-box "~/Mail/INBOX.CRASH"	; keep everything in the vm-folder-directory
      vm-crash-box-suffix nil
      vm-default-From_-folder-type 'From_
      vm-default-folder-type 'From_
      vm-default-window-configuration '((startup
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary)
					     (nil message))
					    ((nil nil nil t)
					     (nil nil nil nil))))))
					(quitting
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary)
					     (nil message))
					    ((nil nil nil t)
					     (nil nil nil nil))))))
					(reading-message
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary)
					     (nil message))
					    ((nil nil nil t)
					     (nil nil nil nil))))))
					(composing-message
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary) ; show summary too
					     (nil composition))
					    ((nil nil nil nil)
					     (nil nil nil t))))))
					(editing-message
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary) ; show summary too
					     (nil edit))
					    ((nil nil nil nil)
					     (nil nil nil t))))))
					(vm-summarize
					 ((((top . 70)
					    (left . 70)))
					  (((-
					     (0 0 80 10)
					     (0 10 80 40))
					    ((nil summary)
					     (nil message))
					    ((nil nil nil t)
					     (nil nil nil nil)))))))
      vm-delete-after-archiving nil
      vm-delete-after-bursting nil
      vm-delete-after-saving nil
      vm-delete-empty-folders t
      vm-digest-burst-type "guess"
      vm-digest-identifier-header-format "X-Digest: %s\n"
      vm-digest-center-preamble t
      vm-digest-preamble-format "\"%s\" (%F)"
      vm-digest-send-type (if (< vm-version-number 6.0)
			      "rfc934"
			    "mime")	; go for the good
;;;   vm-display-buffer-hook nil
      vm-display-using-mime t
      vm-display-xfaces t		; try this out
;;;   vm-edit-message-hook nil
      vm-edit-message-mode 'indented-text-mode ; slightly better than text-mode
      vm-fill-paragraphs-containing-long-lines nil
      vm-flush-interval t		; flush every change (emacs is unstable)
      vm-folder-directory "~/Mail/"	; my usual place
;;;   vm-folder-read-only nil		; don't set this (becomes buffer local!)
      vm-follow-summary-cursor t
;;;   vm-forward-message-hook nil
      vm-forwarded-headers nil
      vm-forwarding-digest-type  (if (< vm-version-number 6.0)
				     "rfc934"
				   "mime") ; go for the good
      vm-forwarding-subject-format "%s (forwarded)\nSummary: forwarded message from %F" ; much better!
      vm-frame-parameter-alist nil
      vm-frame-per-completion nil	; no extra frames!
      vm-frame-per-composition nil	; no extra frames!
      vm-frame-per-edit nil		; no extra frames!
      vm-frame-per-folder nil		; no extra frames!
      vm-frame-per-help t		; ok, maybe one!
      vm-frame-per-summary nil
      vm-highlight-url-face 'bold-italic
      vm-highlighted-header-regexp "^From:\\|^Resent-[fF]rom:\\|^Subject:" ; highlight these headers
      vm-honor-page-delimiters nil
;;;   vm-image-directory "/usr/local/share/emacs/site-lisp/vm/"
      vm-imap-bytes-per-session nil
      vm-imap-expunge-after-retrieving nil ; we'll do this manually
      vm-imap-max-message-size nil
      vm-imap-messages-per-session nil
      vm-imap-session-preauth-hook nil
      vm-in-reply-to-format "%i"
      vm-included-text-attribution-format "[ On %w, %m %d, %y at %h (%z), %F wrote: ]\n> Subject: %s\n>\n"
					; just the way I like it!
      vm-included-text-discard-header-regexp nil
      vm-included-text-headers nil
      vm-included-text-prefix "> "
      vm-index-file-suffix nil
      vm-inhibit-startup-message t	; don't bother me with legalese
;;;   vm-init-file "~/.vm"
      vm-infer-mime-types nil
      vm-invisible-header-regexp (concat "^Content-" "\\|"
					 "^In-[rR]eply-[tT]o:" "\\|"
					 "^Message-I[dD]:" "\\|"
					 "^M[iI][mM][eE]-" "\\|"
					 "^Old-Message-I[dD]:" "\\|"
					 "^Old-Return-Path:" "\\|"
					 "^Original-Message-I[dD]:" "\\|"
					 "^Original-Return-Path:" "\\|"
					 "^Path:" "\\|"
					 "^Received:" "\\|"
					 "^References:" "\\|"
					 "^Resent-Message-I[dD]:" "\\|"
					 "^Resent-Sender:" "\\|"
					 "^Return-Path:" "\\|"
					 "^Sender:" "\\|" "^SENDER:" "\\|"
					 "^Status:" "\\|"
					 "^X-[fF]ace:" "\\|"
					 "^X-[lL]oop:" "\\|"
					 "^X-[mM][iI][mM][eE]" "\\|"
					 "^X-[mM][sS][mM]ail" "\\|"
					 "^X-Original-Received:" "\\|"
					 "^X-[pP][gG][pP]" "\\|"
					 "^X-[rR][eE][fF]" "\\|"
					 "^X-Received:" "\\|"
					 "^X-Sender:" "\\|"
					 "^X-Status:" "\\|"
					 "^X-UIDL:" "\\|"
					 "^X-VM-" "\\|"
					 "^X[rR][eE][fF]:"
					 )	; these are ugly and meaningless
      vm-jump-to-new-messages t
      vm-jump-to-unread-messages t
      vm-keep-crash-boxes "~/tmp/"	; crash inbox saviour
      vm-keep-sent-messages 8		; keep a few for reference
      vm-mail-check-interval nil	; don't bother -- we don't show  mail-waiting indicator
      vm-mail-header-from (concat (user-login-name) "@" (vm-fqdn t)
				  " (" (user-full-name) ")") ; this is also for
							     ; resent-from
      vm-mail-header-insert-date nil	; don't do this!
      vm-mail-header-insert-message-id nil ; don't do this either!
;;;   vm-mail-hook nil
;;;   vm-mail-mode-hook nil
;;;   vm-mail-send-hook nil
      vm-make-crash-box-name nil
      vm-make-spool-file-name nil
      vm-mime-7bit-composition-charset "us-ascii"
      vm-mime-8bit-composition-charset "iso-8859-1"
      vm-mime-8bit-text-transfer-encoding '8bit	; just send it, damn it!
      vm-mime-alternative-select-method 'best-internal
      vm-mime-attachment-auto-type-alist '(("\\.jpe?g" . "image/jpeg")
					   ("\\.gif" . "image/gif")
					   ("\\.png" . "image/png")
					   ("\\.tiff?" . "image/tiff")
					   ("\\.html?" . "text/html")
					   ("\\.au" . "audio/basic")
					   ("\\.mpe?g" . "video/mpeg")
					   ("\\.pdf" . "application/pdf")
					   ("\\.ps" . "application/postscript")
					   ) ; common, from example
      vm-mime-attachment-save-directory nil
      vm-mime-avoid-folding-content-type t
      vm-mime-base64-decoder-program "base64-decode" ; let's assume it's installed
      vm-mime-base64-decoder-switches nil
      vm-mime-base64-encoder-program "base64-encode" ; let's assume it's installed
      vm-mime-base64-encoder-switches nil
      vm-mime-button-face 'gui-button-face
      vm-mime-button-format-alist '(("text" . "%-35.35(%d, %c%) [%k to %a]")
				    ("multipart/alternative" .
				     "%-35.35(%d%) [%k to %a]")
				    ("multipart/digest" .
				     "%-35.35(%d, %n message%s%) [%k to %a]")
				    ("multipart" .
				     "%-35.35(%d, %n part%s%) [%k to %a]")
				    ("message/partial" .
				     "%-35.35(%d, part %N (of %T)%) [%k to %a]")
				    ("message" . "%-35.35(%d%) [%k to %a]")
				    ("audio" . "%-35.35(%d%) [%k to %a]")
				    ("video" . "%-35.35(%d%) [%k to %a]")
				    ("image" . "%-35.35(%d%) [%k to %a]")
				    ("application/octet-stream" .
				     "%-35.35(%d, %f%) [%k to %a]")
				    )
      vm-mime-charset-font-alist '(("x-unknown" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-1")
				   ("us-ascii" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-1")
				   ("iso-8859-1" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-1")
				   ("iso-8859-2" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-2")
				   ("iso-8859-3" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-3")
				   ("iso-8859-4" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-4")
				   ("iso-8859-5" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-5")
				   ("iso-8859-7" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-7")
				   ("iso-8859-8" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-8")
				   ("iso-8859-9" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-iso8859-9")
				   ("koi8" . "-etl-*-medium-r-normal-*-16-*-*-*-c-*-koi8-1")
				   )	; this should be smarter and use preferred-frame-font
      vm-mime-confirm-delete t
      vm-mime-decode-for-preview t
      vm-mime-default-face-charset-exceptions nil
      vm-mime-default-face-charsets '("us-ascii"
				      "iso-8859-1"
				      "x-unknown" ; pine sometimes uses x-unknown!
				      "Windows-1251" ; non-standard crappy M$ crud
				      "Windows-1252" ; non-standard crappy M$ crud
				      "Windows-1257" ; non-standard crappy M$ crud
				      )
      vm-mime-delete-after-saving nil
      vm-mime-delete-viewer-processes t
      vm-mime-digest-discard-header-regexp "X400-|x-uidl" ; yucky headers
      vm-mime-digest-headers nil	; digest all the rest
      vm-mime-display-function nil
      vm-mime-external-content-types-alist '(("image/gif" 	"xv") ; RMS hates GIF so it must be displayed
					     ("image"	 	"xv") ; so other types can be too
;;;  this shouldn't be necessary with 6.92 or newer....
;;;					     ("text/html" 	"xterm -e links") ; links RULES!
					     ("video/mpeg" 	"mpeg_play")
					     ("video" 		"xanim")
					     ) ; basically from the example
      vm-mime-ignore-mime-version t
      vm-mime-internal-content-type-exceptions nil
      vm-mime-internal-content-types t
      vm-mime-max-message-size 100000	; that's more than big enough!
      ;;
      ;; is this the only way to get a charset alias into place?
      ;;
      ;;    vm-mime-mule-charset-to-coding-alist (append
      ;;					    vm-mime-mule-charset-to-coding-alist
      ;;					    '("gb2312" cn-gb-2312)
      ;;					    '("big5" chinese-big5))
      ;;
      ;;
      ;; Emacs-20 cannot handle UTF-8, but if you only expect Latin1 characters
      ;; you can do this:
      ;;
      ;; (add-to-list 'vm-mime-mule-charset-to-coding-alist '("utf-8" iso-8859-1))
      ;;
      ;; and under Emacs 19, you can
      ;;
      ;; (add-to-list 'vm-mime-charset-font-alist '("utf-8" . "some-font-spec"))
      ;;
      vm-mime-qp-decoder-program "qp-decode" ; assume it's there
      vm-mime-qp-decoder-switches nil
      vm-mime-qp-encoder-program "qp-encode" ; assume it's there
      vm-mime-qp-encoder-switches nil
      vm-mime-type-converter-alist '(("application/msword"	"text/plain"	"catdoc -")
				     ("application/ms-word"	"text/plain"	"catdoc -")
				     )	; why I should even mention this, I do not know....
      vm-mime-uuencode-decoder-program "uudecode"
      vm-mime-uuencode-decoder-switches nil
;;;   vm-mode-hook nil
;;;   vm-mode-hooks nil			; >6.0?
      vm-mode-line-format '("" "  %&%& "
			    ("VM: " minor-mode-alist " "
			     (vm-folder-read-only "read-only ")
			     (vm-virtual-folder-definition (vm-virtual-mirror
							    "mirrored "))
			     "%b"
			     (vm-mail-buffer (vm-ml-sort-keys ("" " by "
							       vm-ml-sort-keys)))
			     (vm-message-list
			      ("   " vm-ml-message-number
			       " (of " vm-ml-highest-message-number ")")
			      (vm-folder-type
			       "   (unrecognized folder type)"
			       "   (no messages)")))
			    (vm-message-list
			     ("  %[ " vm-ml-message-attributes-alist
			      (vm-ml-labels ("; " vm-ml-labels)) " %]    ")
			     ("  %[%]   "))
			    "%p" "   " global-mode-string) ; show minor-mode
							   ; too, but not the
							   ; version ID, nor
							   ; the "mail-waiting"
							   ; indicator (it is
							   ; sufficient to use
							   ; xbuffy et al!)
      vm-mosaic-program "Mosaic"
      vm-mosaic-program-switches nil
      vm-move-after-deleting t		; keep on rolling
      vm-move-after-killing t		; keep on rolling
      vm-move-after-undeleting nil
      vm-move-messages-physically nil
      vm-movemail-program "movemail"
      vm-mutable-frames nil		; leave my frames alone!
      vm-mutable-windows t
;;; because of the silly way call-process works, and the horrid syntax
;;; of netscape's -remote option you'll need a script like this in order
;;; to start netscape on a remote host:
;; #! /bin/sh
;; 
;; NETSCAPEHOST=weird
;; NETSCAPEPATH=/usr/local/bin/netscape
;; 
;; if [ $# -eq 2 -a X"$1" = X"-remote" ] ; then
;; 	rsh $NETSCAPEHOST $NETSCAPEPATH -display $DISPLAY -remote "'$2'"
;; else
;; 	rsh $NETSCAPEHOST $NETSCAPEPATH -display $DISPLAY 
;; fi
      vm-netscape-program "netscape"
      vm-netscape-program-switches (list "-display" my-vm-netscape-display)
;;;;      vm-netscape-program "netscape"
;;;;      vm-netscape-program-switches (list "-display" my-vm-netscape-display "-install")
;;; defaults to (default-value 'fill-column)
;;;   vm-paragraph-fill-column
;;; eventually we'll use this:
;;;   vm-pop-auto-expunge-alist
      vm-pop-bytes-per-session nil
      vm-pop-expunge-after-retrieving t
      vm-pop-max-message-size nil
      vm-pop-messages-per-session nil
      vm-pop-md5-program "md5"
      vm-popup-menu-on-mouse-3 t
;;; shouldn't mess with this either????
;;;   vm-preferences-file "~/.vm.preferences"
      vm-preview-lines 4		; allow 4 lines of the body to show
      vm-preview-read-messages nil
      vm-primary-inbox "~/Mail/INBOX"	; keep everything in vm-folder-directory
;;;   vm-quit-hook nil
      vm-recognize-imap-maildrops "^imap:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+"
      vm-recognize-pop-maildrops "^[^:]+:[^:]+:[^:]+:[^:]+:[^:]+"
;;;   vm-reply-hook nil
      vm-reply-ignored-addresses (list (concat "\\("
					        "\\b"
						(user-login-name)
						"\\(\\s \\|$\\)"
					       "\\|"
					        "\\b"
						(user-login-name)
						"@\\(.*\\.\\)?"
						vm-local-domain-name
						"\\([^.]+\\|$\\)"
					       "\\)"))
					; just me!
      vm-reply-ignored-reply-tos nil
      vm-reply-subject-prefix "Re: "	; please do the standard thing!
      vm-resend-bounced-discard-header-regexp "\\(X400-\\)?Received:\\|x-uidl:" ; hmmmm?
      vm-resend-bounced-headers nil	; keep the rest
;;;   vm-resend-bounced-message-hook nil
      vm-resend-discard-header-regexp "\\(\\(X400-\\)?Received:\\|Resent-\\|x-uidl:\\)"	; hmmmm?
      vm-resend-headers nil
;;;   vm-resend-message-hook nil
;;;   vm-retrieved-spooled-mail-hook nil
      vm-rfc1153-digest-discard-header-regexp "\\(X400-\\)?Received:\\|x-uidl:" ; hmmmm?
      vm-rfc1153-digest-headers nil
      vm-rfc934-digest-discard-header-regexp "\\(X400-\\)?Received:\\|x-uidl:" ; hmmmm?
      vm-rfc934-digest-headers nil
      vm-search-using-regexps nil
;;;   vm-select-message-hook nil
;;;   vm-select-new-message-hook nil
;;;   vm-select-unread-message-hook nil
;;;   vm-send-digest-hook nil
      vm-send-using-mime t
      vm-skip-deleted-messages 1	; don't bother if none to see...
      vm-skip-read-messages nil
      vm-spool-files (eval-and-compile (list ; defaults to just the value of
					; MAILPATH or MAIL
		       (list vm-primary-inbox
			     (getenv "MAIL")
			     vm-crash-box)
		       (list vm-primary-inbox
			     "pop.weird.com:pop:apop:woods:*"
			     vm-crash-box)
		       (list (concat vm-primary-inbox ".aci")
			     "imap:imap.aci.on.ca:imap:inbox:login:woods:*"
			     (concat vm-crash-box ".aci"))
		       (list (concat vm-primary-inbox ".soma")
			     "imap:mail.somanetworks.com:imap:inbox:login:woods:*"
			     (concat vm-crash-box ".soma"))
		       (list (concat vm-primary-inbox ".rogers")
			     "mail.ym1.on.wave.home.com:pop:pass:millswoods:*"
			     (concat vm-crash-box ".rogers"))
		       (list (concat vm-primary-inbox ".rogers-netmail")
			     "netmail.home.com:pop:pass:millswoods:*"
			     (concat vm-crash-box ".rogers-netmail"))
		       ))
			
      vm-spool-file-suffixes nil
;;;   vm-spooled-mail-waiting-hook nil
      vm-startup-with-summary t
      vm-strip-reply-headers nil
      vm-subject-significant-chars nil
      vm-summary-format "%3n%*%A %-18.18F %4y/%02M/%02d-%H %4l/%-5c %I\"%s\"\n"
					; ah, that's better! (except %02d
					; doesn't put leading zeros out)
      vm-summary-highlight-face nil	; don't bother -- too much CPU!
;;;   vm-summary-mode-hook nil		; < 6.0?
;;;   vm-summary-mode-hooks nil
;;;   vm-summary-redo-hook nil
;;;   vm-summary-show-threads nil	; this is buffer-local
      vm-summary-thread-indent-level 2
      vm-summary-uninteresting-senders (concat "\\("
					        "\\b"
						(user-login-name)
						"\\(\\s \\|$\\)"
					       "\\|"
					        "\\b"
						(user-login-name)
						"@\\(.*\\.\\)?"
						vm-local-domain-name
						"\\([^.]+\\|$\\)"
					       "\\)")
					; just me!
      vm-summary-uninteresting-senders-arrow "To: "
      vm-tale-is-an-idiot t		; sounds good to me!
      vm-temp-file-directory "~/tmp"	; better for keeping secrets!
      vm-thread-using-subject t
;;;   vm-toolbar-pixmap-directory "/usr/local/share/emacs/site-listp/vm/"
      vm-trust-From_-with-Content-Length nil
;;;   vm-undisplay-buffer-hook nil
      vm-unforwarded-header-regexp "x-uidl:"	; hmmmm?
      vm-url-browser 'vm-mouse-send-url-to-netscape
      vm-url-search-limit 1000000	; the more the merrier
      vm-use-menus '(folder motion send mark label sort virtual undo dispose emacs
			    nil help)
      vm-use-toolbar '(next previous delete/undelete autofile file reply compose
		  print visit quit nil help)
;;;   vm-virtual-folder-alist			; see below....
      vm-virtual-folder-case-fold-search t	; I want everything to match!
      vm-virtual-mirror t
      vm-visible-headers '("Resent-Date:" "Date:"
			   "Newsgroups:"	; better for forwarded news
			   "Resent-From:" "From:"
			   "Organization:"
			   "Resent-Reply-To:" "Reply-To:"
			   "Resent-To:" "To:"
			   "Resent-Apparently-To:" "Apparently-To:"
			   "Resent-Cc:" "Cc:"
			   "Resent-Bcc:" "Bcc:"
			   "Delivered-To:"
			   "Subject:"
			   )		; vm-invisible-header-regexp is set,
					; this defines only the display order
;;;   vm-visit-folder-hook nil
      vm-visit-when-saving 0
      vm-warp-mouse-to-new-frame nil
      vm-window-configuration-file nil		; don't allow saves
      )

;; This is how we pick the default save name.
;;
(setq vm-auto-folder-alist '(
			     ;; To: & Cc: entries here.
			     ("^\\(to\\|cc\\|resent-to\\|apparently-to\\)"
			      ("8lgm-advisories@8lgm.org" . "8lgm-l")
			      ("admin-l@io.org" . "planix/io-admin-l")
			      ("aegis-users@" . "aegis-users-l")
			      ("amanda-hackers@" . "amanda-hackers-l")
			      ("amanda-users@" . "amanda-users-l")
			      ("announce-vm@" . "bug-vm") ; merging too...
			      ("auto-net@" . "auto-net-l")
			      ("autoconf@" . "autoconf-l")
			      ("automake@" . "automake-l")
			      ("cssc-users@gnu.org" . "cssc-users-l")
			      ("best-of-security@cyber.com.au" . "best-of-security-l")
			      ("bind@" . "bind-l")
			      ("bind-users@" . "bind-users-l")
			      ("bind-workers@" . "bind-workers-l")
			      ("bitkeeper-users@" . "bitkeeper-users-l")
			      ("bkl@" . "bitkeeper-license-l")
			      ("bug-vm@" . "bug-vm")
			      ("bugtraq@" . "bugtraq-l")
			      ("com-priv@.*psi.com" . "com-priv-l")
			      ("devel-cvs@" . "devel-cvs-l")
			      ("djb-qmailbeta@" . "djb-qmailbeta-l")
			      ("djb-qmail@" . "djb-qmail-l")
			      ("domain-policy@" . "domain-policy-l")
			      ("exim-users@" . "exim-users-l")
			      ("freenrg-l@" . "freenrg-l")
			      ("gnu-emacs-bug@" . "bug-gnu-emacs-l") ; just merge this
			      ("\\(hyperbole\\|hyperbole-announce\\)@" . "hyperbole-l")
			      ("iap@" . "iap-l")
			      ("info-vm@" . "bug-vm") ; just merge these....
			      ("ipfilter@" . "ipfilter-l")
			      ("ip-registry@" . "ip-registry-l")
			      ("isp-telco@" . "isp-telco-l")
			      ("jet-fuel@" . "jet-fuel-l")
			      ("lout@" . "lout-l")
			      ("NAMEDROPPERS@LISTS.INTERNIC.NET" . "namedroppers-l")
			      ("namedroppers@internic.net" . "namedroppers-l")
			      ("net-dist@nikhef.nl" . "nikhef.net-dist-l")
			      ("newdom@iiia.org" . "newdom-l")
			      ("pcl-cvs@" . "pcl-cvs-l")
			      ("pcl-cvs-auto-bugs@" . "pcl-cvs-l")
			      ("prcs-list@" . "prcs-l")
			      ("qotd@" . "qotd-l")
			      ("quotationoftheday@" . "qotd-l")
			      ("rc@hawkwind.utcs.toronto.edu" . "rc-l")
			      ("rescue@sunhelp.org" . "sunhelp-rescue-l")
			      ("rs-info@" . "rs-info-l")
			      ("shared-tld@" . "shared-tld-l")
			      ("smail3-bugs-fwd@" . "smail3-bugs-fwd-l")
			      ("smail3-devel@" . "smail3-devel-l")
			      ("smail3-maintainers@" . "smail3-maintainers-l")
			      ("smail3-users@" . "smail3-users-l")
			      ("smail3-wizards@" . "smail3-wizards-l")
			      ("spamtools@" . "spamtools-l")
			      ("sparcbook-owners@" . "sparcbook-owners-l")
			      ("squeak@" . "squeak-l")
			      ("squeak-dev@" . "squeak-l")
			      ("ssh@" . "ssh-l")
			      ("stk@" . "stk-l")
			      ("tkined@" . "tkined-l")
			      ("trn-test@" . "trn-test-l")
			      ("zmailer@" . "zmailer-l")
			      ;; various netbsd lists
			      ("source-changes@netbsd.org" . "netbsd/source-changes")
			      ("pkgsrc-changes@netbsd.org" . "netbsd/pkgsrc-changes")
			      ("current-users@netbsd.org" . "netbsd/current-users")
			      ("\\(tech-[^@%]+\\)[@%]netbsd.org" .
			       (concat "netbsd/"
				       (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ("\\(netbsd-[^@%]+\\)[@%]" .
			       (concat "netbsd/"
				       (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ("\\(port-[^@%]+\\)[@%]" .
			       (concat "netbsd/"
				       (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ;; various other <type>-<subj>@ lists....
			      ("\\(bug-[^@%]+\\)[@%]" .
			       (concat (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ("\\(gnu-[^@%]+\\)[@%]" .
			       (concat (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ("\\(info-[^@%]+\\)[@%]" .
			       (concat (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      )
			     ;; Reply-to: entries here.
			     ("^reply-to"
			      ("Suns-at-Home@" . "suns-at-home-l")
			      )
			     ;; Sender: entries here.
			     ("^\\(sender\\|resent-sender\\)"
			      ("ciac-bulletin@" . "ciac-l")
			      ("ciac-notes@" . "ciac-l")
			      ("iap@vma.cc.nd.edu" . "iap-l")
			      ("geeks-admin@sunhelp.org" . "sungeeks-l")
			      ("owner-admin-l@io.org" . "planix/io-admin-l")
			      ("owner-datacenter@" . "datacenter-l")
			      ("owner-dce@" . "dce-l")
			      ("owner-devel-cvs@" . "devel-cvs-l")
			      ("owner-fwtk-users@" . "fwtk-l")
			      ("owner-namedroppers@internic.net" . "namedroppers-l")
			      ("mw-wod@" . "mw-wod-l")
			      ("owner-net-dist@nikhef.nl" . "nikhef.net-dist-l")
			      ("owner-pcl-cvs@" . "pcl-cvs-l")
			      ("owner-rs-info@internic.net" . "rs-info-l")
			      ("owner-vmailer-testers@" . "vmailer-testers-l")
			      ("owner-\\([^@%]+\\)[@%]netbsd.org" .
			       (concat "netbsd/"
				       (buffer-substring (match-beginning 1)
							 (match-end 1))))
			      ("rescue-admin@sunhelp.org" . "sunrescue-l")
			      )
			     ;; From: entries here.
			     ("^\\(from\\|resent-from\\)"
			      ("0xdeadbeef@" . "0xdeadbeef-l")
			      ("gegai@.*io\\.org" . "from/andy")
			      ("Andy_Mills@jdedwards\\.com" . "from/andy")
			      ("andy.mills@schwab.*\\.com" . "from/andy")
			      ("amills@infinetcomm.*\\.com" . "from/andy")
			      ("gnats-bugs@netbsd\\.org" . "netbsd/gnats-bugs")
			      ;; code to make auto-folder default to the user name of the sender.
			      ;; this should be last in the auto folder alist since it tends to
			      ;; always match something.
			      ("<\\([^ \t\n\f@%()<>]+\\)[@%]\\([^ \t\n\f<>()]+\\)>" .
			       (concat "from/"
				       (downcase (buffer-substring (match-beginning 1)
								   (match-end 1)))))
			      ("<\\([^>]+\\)>" . 
			       (concat "from/"
				       (downcase (buffer-substring (match-beginning 1)
								   (match-end 1)))))
			      ("\\([^ \t\n\f@%()<>]+\\)\\([@%]\\([^ \t\n\f<>()]+\\)\\)?" .
			       (concat "from/"
				       (downcase (buffer-substring (match-beginning 1)
								   (match-end 1)))))
			      )
			     ))

;; This is the list of virtual folders created by my-vm-visit-all-virtual-folders
;;
;; XXX It would be nice to use vm-primary-inbox in some way instead of "INBOX"
;; XXX Wouldn't it?
;;
(setq vm-virtual-folder-alist
      (append (list
	       ;; NOTE: This possibly magic way of building an alist is uses so
	       ;; we can get a value into a member from a variable -- i.e.
	       ;; something that needs to be eval'ed at the time the list is
	       ;; created.
	       (list (symbol-value 'my-vm-virtual-leftovers-folder)
		     (list (list "INBOX")
			   '(not (virtual-folder-member)))))
	      '(("BUGTRAQ+INCIDENTS"
		 (("INBOX")
		  (or (recipient "incidents@")
		      (recipient "bugtraq@"))))
		("CM-stuff"
		 (("INBOX")
		  (or (recipient "aegis-users@")
		      (recipient "cssc-users@")
		      (recipient "prcs-list@")
		      (recipient "bitkeeper-users@")
		      (recipient "bkl@")
		      (recipient "shape-l@"))))
		("Datacentre-stuff"
		 (("INBOX")
		  (or (recipient "datacenter@")
		      (recipient "dce@"))))
		("Languages"
		 (("INBOX")
		  (or (recipient "squeak@")
		      (recipient "squeak-dev@")
		      (recipient "stk@"))))
		("Monitoring"
		 (("INBOX")
		  (recipient "cricket-users@")))
		("NANOG"
		 (("INBOX")
		  (or (recipient "nanog@")
		      (recipient "nanog-announce@"))))
		("SSH"
		 (("INBOX")
		  (or (recipient "ssh@")
		      (recipient "secureshell@securityfocus.com"))))
		("VM"
		 (("INBOX")
		  (or (recipient "bug-vm@")
		      (recipient "announce-vm@")
		      (recipient "info-vm@"))))
		("amanda"
		 (("INBOX")
		  (or (recipient "amanda-hackers@")
		      (recipient "amanda-users@"))))
		("cvs"
		 (("INBOX")
		  (or (recipient "bug-cvs@")
		      (recipient "commit-cvs@cyclic.com")
		      (recipient "info-cvs@")
		      (recipient "devel-cvs@"))))
		("dns-stuff"
		 (("INBOX")
		  (or (recipient "domain-policy@")
		      (recipient "namedroppers@")
		      (recipient "bind-workers@")
		      (recipient "bind-users@")
		      (recipient "comp-protocols-dns-bind@")
		      (recipient "rs-info@"))))
		("jet-fuel"
		 (("INBOX")
		  (recipient "jet-fuel@")))
		("lout"
		 (("INBOX")
		  (or (recipient "lout@niif.spb.su")
		      (recipient "lout@ptc.spbu.ru"))))
		("exim"
		 (("INBOX")
		  (or (recipient "exim-users@")
		      (recipient "exim-announce@"))))
		("freebsd"
		 (("INBOX")
		  (or (recipient "freebsd-announe@")
		      (recipient "freebsd-bugs@")
		      (recipient "bugs@freebsd.org")
		      (recipient "freebsd-stable@")
		      (recipient "freebsd-security@"))))
		("ipfilter"
		 (("INBOX")
		  (recipient "ipfilter@")))
		("netbsd-current-users"
		 (("INBOX")
		  (recipient "current-users@")))
		("netbsd-other"
		 (("INBOX")
		  (or (recipient "netbsd-announce@")
		      (recipient "netbsd-help@")
		      (recipient "netbsd-ports@")
		      (recipient "netbsd-users@"))))
		("netbsd-bugs"
		 (("INBOX")
		  (or (recipient "gnats-bugs@gnats.netbsd.org")
		      (recipient "netbsd-bugs@"))))
		("netbsd-source-changes"
		 (("INBOX")
		  (or (recipient "source-changes@")
		      (recipient "pkgsrc-changes@")
		      (recipient "source@netbsd.org"))))
		("netbsd-tech"
		 (("INBOX")
		  (or (recipient "tech-embed@")
		      (recipient "tech-install@")
		      (recipient "tech-kern@")
		      (recipient "tech-misc@")
		      (recipient "tech-net@")
		      (recipient "tech-perform@")
		      (recipient "tech-pkg@")
		      (recipient "tech-ports@")
		      (recipient "tech-security@")
		      (recipient "tech-toolchain@")
		      (recipient "tech-userlevel@"))))
		("netbsd-port-alpha"
		 (("INBOX")
		  (recipient "port-alpha@")))
		("netbsd-port-i386"
		 (("INBOX")
		  (recipient "port-i386@")))
		("netbsd-port-misc"
		 (("INBOX")
		  (or (recipient "port-arm32@")
		      (recipient "port-powerpc@"))))
		("netbsd-port-pmax"
		 (("INBOX")
		  (recipient "port-pmax@")))
		("netbsd-port-sun"
		 (("INBOX")
		  (or (recipient "port-sparc@")
		  (recipient "port-sun3@"))))
		("pcl-cvs"
		 (("INBOX")
		  (or (recipient "pcl-cvs-auto-bugs@")
		      (recipient "pcl-cvs@"))))
		("security-stuff"
		 (("INBOX")
		  (or (recipient "sectools@")
		      (recipient "secpapers@"))))
		("smail3"
		 (("INBOX")
		  (recipient "smail3")))
		("spam-stuff"
		 (("INBOX")
		  (recipient "spamtools@")))
		("sunhelp"
		 (("INBOX")
		  (or (recipient "rescue@sunhelp.org")
		      (recipient "geeks@sunhelp.org"))))
		("tkined"
		 (("INBOX")
		  (recipient "tkined@")))
		("vmailer"
		 (("INBOX")
		  (or (recipient "postfix-announce@")
		      (recipient "postfix-testers@")
		      (recipient "postfix-users@")
		      (recipient "vmailer-testers@")))))))

;;;
;;;	End Of File
;;;
