#
#	.ashlogin - login shell startup for ash, sourced by ~/.profile
#
# N.B.:  this is very similar to ~/.shlogin!
#
#ident	"@(#)HOME:.ashlogin	37.4	24/09/28 11:22:54 (woods)"

if [ -r ${HOME}/.shinter ]; then
	. ${HOME}/.shinter
else
	echo "$0: WARNING: ~/.shinter not found"
fi

if ${sh_is_login}; then
	#
	# Commands for login shells
	#
	set -o ignoreeof	# we only do this for our login shell....
fi

if ${sh_is_interactive}; then
	#
	# Commands for interactive shells.
	#
	echo "$0: setup for Almquist's Shell"

	# for emacs timeclock.el
	#
	if [ ! -f ~/.timelog ] ; then
		touch ~/.timelog
	fi

	export HISTSIZE=2000
else
	echo "$0: WARNING: ~/.ashlogin being sourced by a non-interactive shell! (\$-='$-')"
fi
unset _interactive

# xxx NetBSD /bin/sh (and dash) does not support FPATH
if [ -d $HOME/lib/sh ]; then
	export FPATH=$HOME/lib/sh
fi

export ENVFILE=$HOME/.ashrc
if [ -r "$ENVFILE" ] ; then
	#
	# N.B.:  since ash(1) and its earlier derivatives do not support
	# arithmetic expressions (e.g. for the expansion of the contents of
	# $ENV) the AT&T Ksh trick cannot be used so ~/.ashrc must include its
	# own tests for an interactive shell and selectively do setup depending
	# on the result.
	#
	# NetBSD sh(1), since 2016-03-31 and netbsd-8, i.e. since the
	# introduction of $NETBSD_SHELL, always sources $ENV unless its "posix"
	# option is set.  More recent versions also support arithmetic
	# expressions in the expansion of $ENV, but still do no support arrays.
	#
	export ENV=$ENVFILE
fi

if [ -z "$LOGNAME" ] ; then
	# some systems won't allow this...
	export LOGNAME=${USER}
fi
